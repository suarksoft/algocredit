{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registerInvestor(string,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registerApiKey(string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getApiKeyCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "canGenerateApiKey(string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registerStartup(string,string,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "tokenizeStartup(string,uint64,uint64,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "requestLoan(uint64,uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getInvestorCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStartupCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTokenizedStartupsCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTotalInvestmentsCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLoanRequestCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "investInStartup(uint64,uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "realDeposit()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "simulateDeposit(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "realWithdraw(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "simulateInvestment(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAvailableFunds()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTotalDeposited()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTotalInvested()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPlatformFees()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPlatformStats()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getContractInfo()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "realLoanFunding(uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "simulateLoanFunding(uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isContractActive()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getActiveLoansCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "togglePlatformStatus()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "collectPlatformFees()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPlatformFeesAmount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "testPlatform()string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 11
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contractActive": {
                    "type": "uint64",
                    "key": "contractActive"
                },
                "platformFees": {
                    "type": "uint64",
                    "key": "platformFees"
                },
                "totalActiveLoans": {
                    "type": "uint64",
                    "key": "totalActiveLoans"
                },
                "totalApiKeys": {
                    "type": "uint64",
                    "key": "totalApiKeys"
                },
                "totalFundsDeposited": {
                    "type": "uint64",
                    "key": "totalFundsDeposited"
                },
                "totalFundsInvested": {
                    "type": "uint64",
                    "key": "totalFundsInvested"
                },
                "totalInvestments": {
                    "type": "uint64",
                    "key": "totalInvestments"
                },
                "totalInvestors": {
                    "type": "uint64",
                    "key": "totalInvestors"
                },
                "totalLoanRequests": {
                    "type": "uint64",
                    "key": "totalLoanRequests"
                },
                "totalStartups": {
                    "type": "uint64",
                    "key": "totalStartups"
                },
                "totalTokenizedStartups": {
                    "type": "uint64",
                    "key": "totalTokenizedStartups"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AlgoCreditPlatformTestNet",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Simple hello method for testing"
            },
            {
                "name": "registerInvestor",
                "args": [
                    {
                        "type": "string",
                        "name": "investorType"
                    },
                    {
                        "type": "uint64",
                        "name": "riskLevel"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Register a new investor - REAL GlobalState tracking"
            },
            {
                "name": "registerApiKey",
                "args": [
                    {
                        "type": "string",
                        "name": "walletAddress"
                    },
                    {
                        "type": "string",
                        "name": "apiKeyHash"
                    },
                    {
                        "type": "string",
                        "name": "tier"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Register API key for wallet - REAL GlobalState tracking"
            },
            {
                "name": "getApiKeyCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get API key count - REAL from global state"
            },
            {
                "name": "canGenerateApiKey",
                "args": [
                    {
                        "type": "string",
                        "name": "walletAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Check if wallet can get API key - always allow"
            },
            {
                "name": "registerStartup",
                "args": [
                    {
                        "type": "string",
                        "name": "startupName"
                    },
                    {
                        "type": "string",
                        "name": "industry"
                    },
                    {
                        "type": "uint64",
                        "name": "requestedAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Register a new startup owner - REAL GlobalState tracking"
            },
            {
                "name": "tokenizeStartup",
                "args": [
                    {
                        "type": "string",
                        "name": "startupName"
                    },
                    {
                        "type": "uint64",
                        "name": "tokenPrice"
                    },
                    {
                        "type": "uint64",
                        "name": "totalSupply"
                    },
                    {
                        "type": "string",
                        "name": "industry"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Tokenize a startup - Create tokenized investment opportunity"
            },
            {
                "name": "requestLoan",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "duration"
                    },
                    {
                        "type": "uint64",
                        "name": "interestRate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Create a loan request from startup - REAL implementation"
            },
            {
                "name": "getInvestorCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get investor count - REAL from global state"
            },
            {
                "name": "getStartupCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get startup count - REAL from global state"
            },
            {
                "name": "getTokenizedStartupsCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get tokenized startups count - REAL from global state"
            },
            {
                "name": "getTotalInvestmentsCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get total investments count - REAL from global state"
            },
            {
                "name": "getLoanRequestCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get loan requests count - REAL from global state"
            },
            {
                "name": "investInStartup",
                "args": [
                    {
                        "type": "uint64",
                        "name": "startupId"
                    },
                    {
                        "type": "uint64",
                        "name": "investmentAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "tokenAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Invest in tokenized startup - REAL investment tracking"
            },
            {
                "name": "realDeposit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Real ALGO deposit - requires payment transaction"
            },
            {
                "name": "simulateDeposit",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Simulate deposit - for testing without payment"
            },
            {
                "name": "realWithdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Real ALGO withdrawal - sends ALGO back to user"
            },
            {
                "name": "simulateInvestment",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Simulate investment allocation - REAL GlobalState tracking"
            },
            {
                "name": "getAvailableFunds",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get available funds - REAL calculation"
            },
            {
                "name": "getTotalDeposited",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get total deposited funds - REAL from global state"
            },
            {
                "name": "getTotalInvested",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get total invested funds - REAL from global state"
            },
            {
                "name": "getPlatformFees",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get platform fees - REAL from global state"
            },
            {
                "name": "getPlatformStats",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get platform statistics - REAL data"
            },
            {
                "name": "getContractInfo",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get detailed platform info"
            },
            {
                "name": "realLoanFunding",
                "args": [
                    {
                        "type": "uint64",
                        "name": "loanId"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Real loan funding - sends ALGO to startup"
            },
            {
                "name": "simulateLoanFunding",
                "args": [
                    {
                        "type": "uint64",
                        "name": "loanId"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Simulate loan funding - for testing"
            },
            {
                "name": "isContractActive",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Platform status check - REAL from global state"
            },
            {
                "name": "getActiveLoansCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get active loans count - REAL from global state"
            },
            {
                "name": "togglePlatformStatus",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Admin function to toggle platform status - REAL state change"
            },
            {
                "name": "collectPlatformFees",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Admin function to collect platform fees - REAL ALGO transfer"
            },
            {
                "name": "getPlatformFeesAmount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get platform fees amount"
            },
            {
                "name": "testPlatform",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Test platform with real state"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}