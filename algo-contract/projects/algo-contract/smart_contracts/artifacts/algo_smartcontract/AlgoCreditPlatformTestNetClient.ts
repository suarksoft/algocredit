/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AlgoCreditPlatformTestNet","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simple hello method for testing","events":[],"recommendations":{}},{"name":"registerInvestor","args":[{"type":"string","name":"investorType"},{"type":"uint64","name":"riskLevel"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Register a new investor - REAL GlobalState tracking","events":[],"recommendations":{}},{"name":"registerStartup","args":[{"type":"string","name":"startupName"},{"type":"string","name":"industry"},{"type":"uint64","name":"requestedAmount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Register a new startup owner - REAL GlobalState tracking","events":[],"recommendations":{}},{"name":"tokenizeStartup","args":[{"type":"string","name":"startupName"},{"type":"uint64","name":"tokenPrice"},{"type":"uint64","name":"totalSupply"},{"type":"string","name":"industry"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Tokenize a startup - Create tokenized investment opportunity","events":[],"recommendations":{}},{"name":"requestLoan","args":[{"type":"uint64","name":"amount"},{"type":"uint64","name":"duration"},{"type":"uint64","name":"interestRate"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a loan request from startup - REAL implementation","events":[],"recommendations":{}},{"name":"getInvestorCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get investor count - REAL from global state","events":[],"recommendations":{}},{"name":"getStartupCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get startup count - REAL from global state","events":[],"recommendations":{}},{"name":"getTokenizedStartupsCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get tokenized startups count - REAL from global state","events":[],"recommendations":{}},{"name":"getTotalInvestmentsCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total investments count - REAL from global state","events":[],"recommendations":{}},{"name":"getLoanRequestCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get loan requests count - REAL from global state","events":[],"recommendations":{}},{"name":"investInStartup","args":[{"type":"uint64","name":"startupId"},{"type":"uint64","name":"investmentAmount"},{"type":"uint64","name":"tokenAmount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Invest in tokenized startup - REAL investment tracking","events":[],"recommendations":{}},{"name":"realDeposit","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Real ALGO deposit - requires payment transaction","events":[],"recommendations":{}},{"name":"simulateDeposit","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simulate deposit - for testing without payment","events":[],"recommendations":{}},{"name":"realWithdraw","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Real ALGO withdrawal - sends ALGO back to user","events":[],"recommendations":{}},{"name":"simulateInvestment","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simulate investment allocation - REAL GlobalState tracking","events":[],"recommendations":{}},{"name":"getAvailableFunds","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get available funds - REAL calculation","events":[],"recommendations":{}},{"name":"getTotalDeposited","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total deposited funds - REAL from global state","events":[],"recommendations":{}},{"name":"getTotalInvested","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total invested funds - REAL from global state","events":[],"recommendations":{}},{"name":"getPlatformFees","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform fees - REAL from global state","events":[],"recommendations":{}},{"name":"getPlatformStats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform statistics - REAL data","events":[],"recommendations":{}},{"name":"getContractInfo","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get detailed platform info","events":[],"recommendations":{}},{"name":"realLoanFunding","args":[{"type":"uint64","name":"loanId"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Real loan funding - sends ALGO to startup","events":[],"recommendations":{}},{"name":"simulateLoanFunding","args":[{"type":"uint64","name":"loanId"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simulate loan funding - for testing","events":[],"recommendations":{}},{"name":"isContractActive","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Platform status check - REAL from global state","events":[],"recommendations":{}},{"name":"getActiveLoansCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get active loans count - REAL from global state","events":[],"recommendations":{}},{"name":"togglePlatformStatus","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Admin function to toggle platform status - REAL state change","events":[],"recommendations":{}},{"name":"collectPlatformFees","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Admin function to collect platform fees - REAL ALGO transfer","events":[],"recommendations":{}},{"name":"getPlatformFeesAmount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform fees amount","events":[],"recommendations":{}},{"name":"testPlatform","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Test platform with real state","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":10,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"totalInvestors":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxJbnZlc3RvcnM="},"totalStartups":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFydHVwcw=="},"totalTokenizedStartups":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxUb2tlbml6ZWRTdGFydHVwcw=="},"totalFundsDeposited":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxGdW5kc0RlcG9zaXRlZA=="},"totalFundsInvested":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxGdW5kc0ludmVzdGVk"},"totalLoanRequests":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxMb2FuUmVxdWVzdHM="},"totalActiveLoans":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxBY3RpdmVMb2Fucw=="},"totalInvestments":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxJbnZlc3RtZW50cw=="},"platformFees":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxhdGZvcm1GZWVz"},"contractActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udHJhY3RBY3RpdmU="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[570,594,611,635,659,676,700,732,764,828,852,869,886,903,920,948,976,1004,1028,1064,1081,1098,1115,1132,1149,1185,1229,1269,1303],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1338],"errorMessage":"can only call when creating"},{"pc":[573,597,614,638,662,679,703,735,767,831,855,872,889,906,923,951,979,1007,1031,1067,1084,1101,1118,1135,1152,1188,1232,1272,1306],"errorMessage":"can only call when not creating"},{"pc":[1417,1550,1702,1754,1959,2006,2012,2018,2024,2030,2122,2133,2143,2153,2200,2322,2418,2422,2519,2583,2587,2644,2690,2694,2700,2705,2710,2719,2727,2833,2837,2851,2862,2872,2950,2954,2968,2979,2989,3040,3046,3107,3193,3199],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAGAAHAhD0ygJTr3AOgjQYmEAQVH3x1EnRvdGFsRnVuZHNJbnZlc3RlZBN0b3RhbEZ1bmRzRGVwb3NpdGVkDHBsYXRmb3JtRmVlcw5jb250cmFjdEFjdGl2ZRB0b3RhbEFjdGl2ZUxvYW5zDnRvdGFsSW52ZXN0b3JzDXRvdGFsU3RhcnR1cHMWdG90YWxUb2tlbml6ZWRTdGFydHVwcxF0b3RhbExvYW5SZXF1ZXN0cxB0b3RhbEludmVzdG1lbnRzHlBsYXRmb3JtIGlzIGN1cnJlbnRseSBpbmFjdGl2ZShJbnZlc3RtZW50IGFtb3VudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJUZ1bmRpbmcgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAPSW52YWxpZCBsb2FuIElEHEluc3VmZmljaWVudCBhdmFpbGFibGUgZnVuZHMxG0EDz4IdBAK+zhEE9DKHqwR+rByhBB9SPHQE/4Q36wT1nHzsBH+g3KAEoUumnQRk4rt4BKV8Yz4EmtQKywSYJMcCBBspTcwEeQ86+ARF4Z+pBMtFqLcEWHqlcwTkdtGCBO5XyCwEESN7SAS+XnKgBNennC8ExdytPwSKHaxLBFyO5dIE7np9BAT2XMJ3BAnD1f0EgFIhXjYaAI4dAt8CvQKVAmkCRQI0AiMCEgIBAfABzAG0AZgBfAFgAU8BPgEtARwBBADEAKQAhABsAFsAQwArABoAAiJDMRkURDEYRIgKOkkVFlcGAkxQKExQsCNDMRkURDEYRIgKHRYoTFCwI0MxGRREMRhEiAm2SRUWVwYCTFAoTFCwI0MxGRREMRhEiAlgSRUWVwYCTFAoTFCwI0MxGRREMRhEiAlCFihMULAjQzEZFEQxGESADBUffHUAAAAAAAAAAbAjQzEZFEQxGEQ2GgEXNhoCF4gIoUkVFlcGAkxQKExQsCNDMRkURDEYRDYaARc2GgIXiAgMSRUWVwYCTFAoTFCwI0MxGRREMRhEgDQVH3x1AC5BbGdvQ3JlZGl0IFBsYXRmb3JtIHYzLjAgLSBSZWFsIFBheW1lbnRzIFJlYWR5sCNDMRkURDEYRIgHVUkVFlcGAkxQKExQsCNDMRkURDEYRIgHOBYoTFCwI0MxGRREMRhEiAciFihMULAjQzEZFEQxGESIBwwWKExQsCNDMRkURDEYRIgG8RYoTFCwI0MxGRREMRhENhoBF4gGZEkVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIBXtJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXiATkSRUWVwYCTFAoTFCwI0MxGRREMRhEiASiSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXiAPZSRUWVwYCTFAoTFCwI0MxGRREMRhEiAO7FihMULAjQzEZFEQxGESIA6QWKExQsCNDMRkURDEYRIgDjRYoTFCwI0MxGRREMRhEiAN2FihMULAjQzEZFEQxGESIA18WKExQsCNDMRkURDEYRDYaARc2GgIXNhoDF4gCQ0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCADYaAhc2GgMXNhoEVwIAiAGKSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDF4gAz0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCADYaAheIAEdJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgCIABlJFRZXBgJMUChMULAjQzEZQPz+MRgURCNDigEBgAdIZWxsbywgi/9QiYoCAYv/IwxAAAiL/4EKDUEAJoAjUmlzayBsZXZlbCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMTCJIicGZUQjCCcGTGeAIEludmVzdG9yIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5iYoDAYv/JAxBACGAHk1pbmltdW0gbG9hbiByZXF1ZXN0IGlzIDEgQUxHT4mL/yEEDUEAJIAhTWF4aW11bSBsb2FuIHJlcXVlc3QgaXMgMTAwMCBBTEdPiSInB2VEIwgnB0xngCFTdGFydHVwIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5OiCL/VCABCBpbiBQi/5QiYoEAYv9Ig5BACWAIlRva2VuIHByaWNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDCJi/4iDkEAJoAjVG90YWwgc3VwcGx5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDCJIicIZUQjCCcITGeAIFN0YXJ0dXAgdG9rZW5pemVkIHN1Y2Nlc3NmdWxseTogi/xQiYoDASInBGVEQAADJwuJi/0kDEEAIIAdTWluaW11bSBsb2FuIGFtb3VudCBpcyAxIEFMR0+Ji/0hBA1BACOAIE1heGltdW0gbG9hbiBhbW91bnQgaXMgMTAwMCBBTEdPiYv+IwxAAAiL/oE8DUEALIApTG9hbiBkdXJhdGlvbiBtdXN0IGJlIGJldHdlZW4gMS02MCBtb250aHOJi/8jDEAACIv/gR4NQQAmgCNJbnRlcmVzdCByYXRlIG11c3QgYmUgYmV0d2VlbiAxLTMwJYkiJwllRCMIJwlMZ4AhTG9hbiByZXF1ZXN0IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5iSInBmVEiSInB2VEiSInCGVEiSInCmVEiSInCWVEiYoDAYv+Ig5BAAMnDImL/yIOQQAmgCNUb2tlbiBhbW91bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMImL/SIOQQAVgBJJbnZhbGlkIHN0YXJ0dXAgSUSJIicEZURAAAMnC4kiJwplRCMIJwpMZyIpZUSL/ggpTGciK2VEi/4lCggrTGeAIEludmVzdG1lbnQgc3VjY2Vzc2Z1bCBpbiBzdGFydHVwiSIqZUQkCCpMZ4AeUmVhbCBkZXBvc2l0IHByb2Nlc3NlZDogMSBBTEdPiYoBAYv/Ig5BACCAHUFtb3VudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwiYv/IQUMQQAegBtNaW5pbXVtIGRlcG9zaXQgaXMgMC4xIEFMR0+JIiplRIv/CCpMZ4AeRGVwb3NpdCBzaW11bGF0ZWQgc3VjY2Vzc2Z1bGx5iYoBAYv/Ig5BACuAKFdpdGhkcmF3YWwgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDCJIiplRCIpZUQJi/8MQQAtgCpJbnN1ZmZpY2llbnQgY29udHJhY3QgZnVuZHMgZm9yIHdpdGhkcmF3YWyJi/8hBQxBACGAHk1pbmltdW0gd2l0aGRyYXdhbCBpcyAwLjEgQUxHT4kiKmVEi/8JKkxngCZSZWFsIHdpdGhkcmF3YWwgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseYmKAQGL/yIOQQADJwyJIiplRCIpZUQJi/8MQQAugCtJbnN1ZmZpY2llbnQgYXZhaWxhYmxlIGZ1bmRzIGZvciBpbnZlc3RtZW50iSIpZUSL/wgpTGeAIUludmVzdG1lbnQgYWxsb2NhdGVkIHN1Y2Nlc3NmdWxseYkiKmVEIillRAmJIiplRIkiKWVEiSIrZUSJigABIicGZUQiJwdlTE4CREAALYsAQAAogCRBbGdvQ3JlZGl0IFBsYXRmb3JtOiBSZWFkeSBmb3IgdXNlcnNMiYAbQWxnb0NyZWRpdCBQbGF0Zm9ybTogQWN0aXZlTImKAgGL/yIOQQADJw2Ji/4iDkEAAycOiSIqZUQiKWVECYv/DEEAAycPiSIpZUSL/wgpTGciJwVlRCMIJwVMZyIrZUSL/yUKCCtMZ4AoUmVhbCBsb2FuIGZ1bmRpbmcgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseYmKAgGL/yIOQQADJw2Ji/4iDkEAAycOiSIqZUQiKWVECYv/DEEAAycPiSIpZUSL/wgpTGciJwVlRCMIJwVMZyIrZUSL/yUKCCtMZ4AjTG9hbiBmdW5kaW5nIHNpbXVsYXRlZCBzdWNjZXNzZnVsbHmJIicFZUSJIicEZUQjEkEAGycEImeAFFBsYXRmb3JtIGRlYWN0aXZhdGVkiScEI2eAElBsYXRmb3JtIGFjdGl2YXRlZIkiK2VEIg5BACOAIE5vIGZlZXMgYXZhaWxhYmxlIGZvciBjb2xsZWN0aW9uiSsiZ4AkUGxhdGZvcm0gZmVlcyBjb2xsZWN0ZWQgc3VjY2Vzc2Z1bGx5iSIrZUSJIicEZUQjEkEAL4AsQWxnb0NyZWRpdCBQbGF0Zm9ybSB0ZXN0IHN1Y2Nlc3NmdWwgLSBBQ1RJVkWJgC5BbGdvQ3JlZGl0IFBsYXRmb3JtIHRlc3Qgc3VjY2Vzc2Z1bCAtIElOQUNUSVZFiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AlgoCreditPlatformTestNet contract
 */
export type AlgoCreditPlatformTestNetArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'registerInvestor(string,uint64)string': {
      investorType: string
      riskLevel: bigint | number
    }
    'registerStartup(string,string,uint64)string': {
      startupName: string
      industry: string
      requestedAmount: bigint | number
    }
    'tokenizeStartup(string,uint64,uint64,string)string': {
      startupName: string
      tokenPrice: bigint | number
      totalSupply: bigint | number
      industry: string
    }
    'requestLoan(uint64,uint64,uint64)string': {
      amount: bigint | number
      duration: bigint | number
      interestRate: bigint | number
    }
    'getInvestorCount()uint64': Record<string, never>
    'getStartupCount()uint64': Record<string, never>
    'getTokenizedStartupsCount()uint64': Record<string, never>
    'getTotalInvestmentsCount()uint64': Record<string, never>
    'getLoanRequestCount()uint64': Record<string, never>
    'investInStartup(uint64,uint64,uint64)string': {
      startupId: bigint | number
      investmentAmount: bigint | number
      tokenAmount: bigint | number
    }
    'realDeposit()string': Record<string, never>
    'simulateDeposit(uint64)string': {
      amount: bigint | number
    }
    'realWithdraw(uint64)string': {
      amount: bigint | number
    }
    'simulateInvestment(uint64)string': {
      amount: bigint | number
    }
    'getAvailableFunds()uint64': Record<string, never>
    'getTotalDeposited()uint64': Record<string, never>
    'getTotalInvested()uint64': Record<string, never>
    'getPlatformFees()uint64': Record<string, never>
    'getPlatformStats()string': Record<string, never>
    'getContractInfo()string': Record<string, never>
    'realLoanFunding(uint64,uint64)string': {
      loanId: bigint | number
      amount: bigint | number
    }
    'simulateLoanFunding(uint64,uint64)string': {
      loanId: bigint | number
      amount: bigint | number
    }
    'isContractActive()uint64': Record<string, never>
    'getActiveLoansCount()uint64': Record<string, never>
    'togglePlatformStatus()string': Record<string, never>
    'collectPlatformFees()string': Record<string, never>
    'getPlatformFeesAmount()uint64': Record<string, never>
    'testPlatform()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'registerInvestor(string,uint64)string': [investorType: string, riskLevel: bigint | number]
    'registerStartup(string,string,uint64)string': [startupName: string, industry: string, requestedAmount: bigint | number]
    'tokenizeStartup(string,uint64,uint64,string)string': [startupName: string, tokenPrice: bigint | number, totalSupply: bigint | number, industry: string]
    'requestLoan(uint64,uint64,uint64)string': [amount: bigint | number, duration: bigint | number, interestRate: bigint | number]
    'getInvestorCount()uint64': []
    'getStartupCount()uint64': []
    'getTokenizedStartupsCount()uint64': []
    'getTotalInvestmentsCount()uint64': []
    'getLoanRequestCount()uint64': []
    'investInStartup(uint64,uint64,uint64)string': [startupId: bigint | number, investmentAmount: bigint | number, tokenAmount: bigint | number]
    'realDeposit()string': []
    'simulateDeposit(uint64)string': [amount: bigint | number]
    'realWithdraw(uint64)string': [amount: bigint | number]
    'simulateInvestment(uint64)string': [amount: bigint | number]
    'getAvailableFunds()uint64': []
    'getTotalDeposited()uint64': []
    'getTotalInvested()uint64': []
    'getPlatformFees()uint64': []
    'getPlatformStats()string': []
    'getContractInfo()string': []
    'realLoanFunding(uint64,uint64)string': [loanId: bigint | number, amount: bigint | number]
    'simulateLoanFunding(uint64,uint64)string': [loanId: bigint | number, amount: bigint | number]
    'isContractActive()uint64': []
    'getActiveLoansCount()uint64': []
    'togglePlatformStatus()string': []
    'collectPlatformFees()string': []
    'getPlatformFeesAmount()uint64': []
    'testPlatform()string': []
  }
}

/**
 * The return type for each method
 */
export type AlgoCreditPlatformTestNetReturns = {
  'hello(string)string': string
  'registerInvestor(string,uint64)string': string
  'registerStartup(string,string,uint64)string': string
  'tokenizeStartup(string,uint64,uint64,string)string': string
  'requestLoan(uint64,uint64,uint64)string': string
  'getInvestorCount()uint64': bigint
  'getStartupCount()uint64': bigint
  'getTokenizedStartupsCount()uint64': bigint
  'getTotalInvestmentsCount()uint64': bigint
  'getLoanRequestCount()uint64': bigint
  'investInStartup(uint64,uint64,uint64)string': string
  'realDeposit()string': string
  'simulateDeposit(uint64)string': string
  'realWithdraw(uint64)string': string
  'simulateInvestment(uint64)string': string
  'getAvailableFunds()uint64': bigint
  'getTotalDeposited()uint64': bigint
  'getTotalInvested()uint64': bigint
  'getPlatformFees()uint64': bigint
  'getPlatformStats()string': string
  'getContractInfo()string': string
  'realLoanFunding(uint64,uint64)string': string
  'simulateLoanFunding(uint64,uint64)string': string
  'isContractActive()uint64': bigint
  'getActiveLoansCount()uint64': bigint
  'togglePlatformStatus()string': string
  'collectPlatformFees()string': string
  'getPlatformFeesAmount()uint64': bigint
  'testPlatform()string': string
}

/**
 * Defines the types of available calls and state of the AlgoCreditPlatformTestNet smart contract.
 */
export type AlgoCreditPlatformTestNetTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['hello(string)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']
      returns: AlgoCreditPlatformTestNetReturns['hello(string)string']
    }>
    & Record<'registerInvestor(string,uint64)string' | 'registerInvestor', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['registerInvestor(string,uint64)string']
    }>
    & Record<'registerStartup(string,string,uint64)string' | 'registerStartup', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['registerStartup(string,string,uint64)string']
    }>
    & Record<'tokenizeStartup(string,uint64,uint64,string)string' | 'tokenizeStartup', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']
      returns: AlgoCreditPlatformTestNetReturns['tokenizeStartup(string,uint64,uint64,string)string']
    }>
    & Record<'requestLoan(uint64,uint64,uint64)string' | 'requestLoan', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['requestLoan(uint64,uint64,uint64)string']
    }>
    & Record<'getInvestorCount()uint64' | 'getInvestorCount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getInvestorCount()uint64']
    }>
    & Record<'getStartupCount()uint64' | 'getStartupCount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getStartupCount()uint64']
    }>
    & Record<'getTokenizedStartupsCount()uint64' | 'getTokenizedStartupsCount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getTokenizedStartupsCount()uint64']
    }>
    & Record<'getTotalInvestmentsCount()uint64' | 'getTotalInvestmentsCount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getTotalInvestmentsCount()uint64']
    }>
    & Record<'getLoanRequestCount()uint64' | 'getLoanRequestCount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getLoanRequestCount()uint64']
    }>
    & Record<'investInStartup(uint64,uint64,uint64)string' | 'investInStartup', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['investInStartup(uint64,uint64,uint64)string']
    }>
    & Record<'realDeposit()string' | 'realDeposit', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']
      returns: AlgoCreditPlatformTestNetReturns['realDeposit()string']
    }>
    & Record<'simulateDeposit(uint64)string' | 'simulateDeposit', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['simulateDeposit(uint64)string']
    }>
    & Record<'realWithdraw(uint64)string' | 'realWithdraw', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['realWithdraw(uint64)string']
    }>
    & Record<'simulateInvestment(uint64)string' | 'simulateInvestment', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['simulateInvestment(uint64)string']
    }>
    & Record<'getAvailableFunds()uint64' | 'getAvailableFunds', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getAvailableFunds()uint64']
    }>
    & Record<'getTotalDeposited()uint64' | 'getTotalDeposited', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getTotalDeposited()uint64']
    }>
    & Record<'getTotalInvested()uint64' | 'getTotalInvested', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getTotalInvested()uint64']
    }>
    & Record<'getPlatformFees()uint64' | 'getPlatformFees', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getPlatformFees()uint64']
    }>
    & Record<'getPlatformStats()string' | 'getPlatformStats', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']
      returns: AlgoCreditPlatformTestNetReturns['getPlatformStats()string']
    }>
    & Record<'getContractInfo()string' | 'getContractInfo', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']
      returns: AlgoCreditPlatformTestNetReturns['getContractInfo()string']
    }>
    & Record<'realLoanFunding(uint64,uint64)string' | 'realLoanFunding', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['realLoanFunding(uint64,uint64)string']
    }>
    & Record<'simulateLoanFunding(uint64,uint64)string' | 'simulateLoanFunding', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']
      returns: AlgoCreditPlatformTestNetReturns['simulateLoanFunding(uint64,uint64)string']
    }>
    & Record<'isContractActive()uint64' | 'isContractActive', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']
      returns: AlgoCreditPlatformTestNetReturns['isContractActive()uint64']
    }>
    & Record<'getActiveLoansCount()uint64' | 'getActiveLoansCount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getActiveLoansCount()uint64']
    }>
    & Record<'togglePlatformStatus()string' | 'togglePlatformStatus', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']
      returns: AlgoCreditPlatformTestNetReturns['togglePlatformStatus()string']
    }>
    & Record<'collectPlatformFees()string' | 'collectPlatformFees', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']
      returns: AlgoCreditPlatformTestNetReturns['collectPlatformFees()string']
    }>
    & Record<'getPlatformFeesAmount()uint64' | 'getPlatformFeesAmount', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']
      returns: AlgoCreditPlatformTestNetReturns['getPlatformFeesAmount()uint64']
    }>
    & Record<'testPlatform()string' | 'testPlatform', {
      argsObj: AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string']
      argsTuple: AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']
      returns: AlgoCreditPlatformTestNetReturns['testPlatform()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalInvestors: bigint
        totalStartups: bigint
        totalTokenizedStartups: bigint
        totalFundsDeposited: bigint
        totalFundsInvested: bigint
        totalLoanRequests: bigint
        totalActiveLoans: bigint
        totalInvestments: bigint
        platformFees: bigint
        contractActive: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoCreditPlatformTestNetSignatures = keyof AlgoCreditPlatformTestNetTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoCreditPlatformTestNetNonVoidMethodSignatures = keyof AlgoCreditPlatformTestNetTypes['methods'] extends infer T ? T extends keyof AlgoCreditPlatformTestNetTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AlgoCreditPlatformTestNet smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoCreditPlatformTestNetSignatures> = AlgoCreditPlatformTestNetTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoCreditPlatformTestNet smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoCreditPlatformTestNetSignatures> = AlgoCreditPlatformTestNetTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AlgoCreditPlatformTestNetTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoCreditPlatformTestNetCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoCreditPlatformTestNetDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoCreditPlatformTestNetCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AlgoCreditPlatformTestNet smart contract
 */
export abstract class AlgoCreditPlatformTestNetParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Simple hello method for testing
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['hello(string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the registerInvestor(string,uint64)string ABI method
   *
   * Register a new investor - REAL GlobalState tracking
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerInvestor(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerInvestor(string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.investorType, params.args.riskLevel],
    }
  }
  /**
   * Constructs a no op call for the registerStartup(string,string,uint64)string ABI method
   *
   * Register a new startup owner - REAL GlobalState tracking
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerStartup(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerStartup(string,string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startupName, params.args.industry, params.args.requestedAmount],
    }
  }
  /**
   * Constructs a no op call for the tokenizeStartup(string,uint64,uint64,string)string ABI method
   *
   * Tokenize a startup - Create tokenized investment opportunity
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static tokenizeStartup(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'tokenizeStartup(string,uint64,uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startupName, params.args.tokenPrice, params.args.totalSupply, params.args.industry],
    }
  }
  /**
   * Constructs a no op call for the requestLoan(uint64,uint64,uint64)string ABI method
   *
   * Create a loan request from startup - REAL implementation
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestLoan(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'requestLoan(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.duration, params.args.interestRate],
    }
  }
  /**
   * Constructs a no op call for the getInvestorCount()uint64 ABI method
   *
   * Get investor count - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getInvestorCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getInvestorCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getStartupCount()uint64 ABI method
   *
   * Get startup count - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStartupCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getStartupCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTokenizedStartupsCount()uint64 ABI method
   *
   * Get tokenized startups count - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTokenizedStartupsCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTokenizedStartupsCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalInvestmentsCount()uint64 ABI method
   *
   * Get total investments count - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalInvestmentsCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalInvestmentsCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getLoanRequestCount()uint64 ABI method
   *
   * Get loan requests count - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanRequestCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanRequestCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the investInStartup(uint64,uint64,uint64)string ABI method
   *
   * Invest in tokenized startup - REAL investment tracking
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static investInStartup(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'investInStartup(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startupId, params.args.investmentAmount, params.args.tokenAmount],
    }
  }
  /**
   * Constructs a no op call for the realDeposit()string ABI method
   *
   * Real ALGO deposit - requires payment transaction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static realDeposit(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string'] | AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'realDeposit()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the simulateDeposit(uint64)string ABI method
   *
   * Simulate deposit - for testing without payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static simulateDeposit(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'simulateDeposit(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the realWithdraw(uint64)string ABI method
   *
   * Real ALGO withdrawal - sends ALGO back to user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static realWithdraw(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'realWithdraw(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the simulateInvestment(uint64)string ABI method
   *
   * Simulate investment allocation - REAL GlobalState tracking
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static simulateInvestment(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'simulateInvestment(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getAvailableFunds()uint64 ABI method
   *
   * Get available funds - REAL calculation
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAvailableFunds(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAvailableFunds()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalDeposited()uint64 ABI method
   *
   * Get total deposited funds - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDeposited(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalDeposited()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalInvested()uint64 ABI method
   *
   * Get total invested funds - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalInvested(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalInvested()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPlatformFees()uint64 ABI method
   *
   * Get platform fees - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformFees(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformFees()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPlatformStats()string ABI method
   *
   * Get platform statistics - REAL data
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformStats(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformStats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getContractInfo()string ABI method
   *
   * Get detailed platform info
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractInfo(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractInfo()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the realLoanFunding(uint64,uint64)string ABI method
   *
   * Real loan funding - sends ALGO to startup
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static realLoanFunding(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'realLoanFunding(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the simulateLoanFunding(uint64,uint64)string ABI method
   *
   * Simulate loan funding - for testing
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static simulateLoanFunding(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'simulateLoanFunding(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the isContractActive()uint64 ABI method
   *
   * Platform status check - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isContractActive(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isContractActive()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getActiveLoansCount()uint64 ABI method
   *
   * Get active loans count - REAL from global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getActiveLoansCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getActiveLoansCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the togglePlatformStatus()string ABI method
   *
   * Admin function to toggle platform status - REAL state change
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static togglePlatformStatus(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string'] | AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'togglePlatformStatus()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the collectPlatformFees()string ABI method
   *
   * Admin function to collect platform fees - REAL ALGO transfer
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static collectPlatformFees(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string'] | AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'collectPlatformFees()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPlatformFeesAmount()uint64 ABI method
   *
   * Get platform fees amount
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformFeesAmount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformFeesAmount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the testPlatform()string ABI method
   *
   * Test platform with real state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static testPlatform(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string'] | AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'testPlatform()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AlgoCreditPlatformTestNet smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoCreditPlatformTestNetFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoCreditPlatformTestNetFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoCreditPlatformTestNetClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoCreditPlatformTestNetClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AlgoCreditPlatformTestNet smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoCreditPlatformTestNetDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AlgoCreditPlatformTestNetClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoCreditPlatformTestNet smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoCreditPlatformTestNet smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoCreditPlatformTestNet smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AlgoCreditPlatformTestNetClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AlgoCreditPlatformTestNet smart contract
 */
export class AlgoCreditPlatformTestNetClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoCreditPlatformTestNetClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AlgoCreditPlatformTestNet app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoCreditPlatformTestNetClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoCreditPlatformTestNetNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoCreditPlatformTestNetClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoCreditPlatformTestNetClient> {
    return new AlgoCreditPlatformTestNetClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoCreditPlatformTestNetClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoCreditPlatformTestNetClient> {
    return new AlgoCreditPlatformTestNetClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoCreditPlatformTestNet smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `hello(string)string` ABI method.
     *
     * Simple hello method for testing
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['hello(string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.hello(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `registerInvestor(string,uint64)string` ABI method.
     *
     * Register a new investor - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerInvestor: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.registerInvestor(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `registerStartup(string,string,uint64)string` ABI method.
     *
     * Register a new startup owner - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerStartup: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.registerStartup(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `tokenizeStartup(string,uint64,uint64,string)string` ABI method.
     *
     * Tokenize a startup - Create tokenized investment opportunity
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    tokenizeStartup: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.tokenizeStartup(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `requestLoan(uint64,uint64,uint64)string` ABI method.
     *
     * Create a loan request from startup - REAL implementation
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestLoan: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.requestLoan(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getInvestorCount()uint64` ABI method.
     *
     * Get investor count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getInvestorCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getInvestorCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getStartupCount()uint64` ABI method.
     *
     * Get startup count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStartupCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getStartupCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTokenizedStartupsCount()uint64` ABI method.
     *
     * Get tokenized startups count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTokenizedStartupsCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getTokenizedStartupsCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalInvestmentsCount()uint64` ABI method.
     *
     * Get total investments count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalInvestmentsCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getTotalInvestmentsCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getLoanRequestCount()uint64` ABI method.
     *
     * Get loan requests count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLoanRequestCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getLoanRequestCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `investInStartup(uint64,uint64,uint64)string` ABI method.
     *
     * Invest in tokenized startup - REAL investment tracking
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    investInStartup: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.investInStartup(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realDeposit()string` ABI method.
     *
     * Real ALGO deposit - requires payment transaction
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    realDeposit: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string'] | AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.realDeposit(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateDeposit(uint64)string` ABI method.
     *
     * Simulate deposit - for testing without payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    simulateDeposit: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.simulateDeposit(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realWithdraw(uint64)string` ABI method.
     *
     * Real ALGO withdrawal - sends ALGO back to user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    realWithdraw: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.realWithdraw(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateInvestment(uint64)string` ABI method.
     *
     * Simulate investment allocation - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    simulateInvestment: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.simulateInvestment(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getAvailableFunds()uint64` ABI method.
     *
     * Get available funds - REAL calculation
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAvailableFunds: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getAvailableFunds(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalDeposited()uint64` ABI method.
     *
     * Get total deposited funds - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalDeposited: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getTotalDeposited(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalInvested()uint64` ABI method.
     *
     * Get total invested funds - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalInvested: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getTotalInvested(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformFees()uint64` ABI method.
     *
     * Get platform fees - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformFees: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformFees(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics - REAL data
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformStats: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getContractInfo()string` ABI method.
     *
     * Get detailed platform info
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractInfo: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getContractInfo(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realLoanFunding(uint64,uint64)string` ABI method.
     *
     * Real loan funding - sends ALGO to startup
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    realLoanFunding: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.realLoanFunding(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateLoanFunding(uint64,uint64)string` ABI method.
     *
     * Simulate loan funding - for testing
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    simulateLoanFunding: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.simulateLoanFunding(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `isContractActive()uint64` ABI method.
     *
     * Platform status check - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isContractActive: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.isContractActive(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getActiveLoansCount()uint64` ABI method.
     *
     * Get active loans count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getActiveLoansCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getActiveLoansCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `togglePlatformStatus()string` ABI method.
     *
     * Admin function to toggle platform status - REAL state change
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    togglePlatformStatus: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string'] | AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.togglePlatformStatus(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `collectPlatformFees()string` ABI method.
     *
     * Admin function to collect platform fees - REAL ALGO transfer
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    collectPlatformFees: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string'] | AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.collectPlatformFees(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformFeesAmount()uint64` ABI method.
     *
     * Get platform fees amount
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformFeesAmount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformFeesAmount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `testPlatform()string` ABI method.
     *
     * Test platform with real state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    testPlatform: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string'] | AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoCreditPlatformTestNetParamsFactory.testPlatform(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoCreditPlatformTestNet smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `hello(string)string` ABI method.
     *
     * Simple hello method for testing
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['hello(string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.hello(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `registerInvestor(string,uint64)string` ABI method.
     *
     * Register a new investor - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerInvestor: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.registerInvestor(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `registerStartup(string,string,uint64)string` ABI method.
     *
     * Register a new startup owner - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerStartup: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.registerStartup(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `tokenizeStartup(string,uint64,uint64,string)string` ABI method.
     *
     * Tokenize a startup - Create tokenized investment opportunity
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    tokenizeStartup: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.tokenizeStartup(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `requestLoan(uint64,uint64,uint64)string` ABI method.
     *
     * Create a loan request from startup - REAL implementation
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestLoan: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.requestLoan(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getInvestorCount()uint64` ABI method.
     *
     * Get investor count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getInvestorCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getInvestorCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getStartupCount()uint64` ABI method.
     *
     * Get startup count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStartupCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getStartupCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTokenizedStartupsCount()uint64` ABI method.
     *
     * Get tokenized startups count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTokenizedStartupsCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getTokenizedStartupsCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalInvestmentsCount()uint64` ABI method.
     *
     * Get total investments count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalInvestmentsCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getTotalInvestmentsCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getLoanRequestCount()uint64` ABI method.
     *
     * Get loan requests count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLoanRequestCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getLoanRequestCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `investInStartup(uint64,uint64,uint64)string` ABI method.
     *
     * Invest in tokenized startup - REAL investment tracking
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    investInStartup: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.investInStartup(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realDeposit()string` ABI method.
     *
     * Real ALGO deposit - requires payment transaction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    realDeposit: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string'] | AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.realDeposit(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateDeposit(uint64)string` ABI method.
     *
     * Simulate deposit - for testing without payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    simulateDeposit: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.simulateDeposit(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realWithdraw(uint64)string` ABI method.
     *
     * Real ALGO withdrawal - sends ALGO back to user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    realWithdraw: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.realWithdraw(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateInvestment(uint64)string` ABI method.
     *
     * Simulate investment allocation - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    simulateInvestment: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.simulateInvestment(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getAvailableFunds()uint64` ABI method.
     *
     * Get available funds - REAL calculation
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAvailableFunds: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getAvailableFunds(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalDeposited()uint64` ABI method.
     *
     * Get total deposited funds - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalDeposited: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getTotalDeposited(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalInvested()uint64` ABI method.
     *
     * Get total invested funds - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalInvested: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getTotalInvested(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformFees()uint64` ABI method.
     *
     * Get platform fees - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformFees: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformFees(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics - REAL data
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformStats: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getContractInfo()string` ABI method.
     *
     * Get detailed platform info
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractInfo: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getContractInfo(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realLoanFunding(uint64,uint64)string` ABI method.
     *
     * Real loan funding - sends ALGO to startup
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    realLoanFunding: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.realLoanFunding(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateLoanFunding(uint64,uint64)string` ABI method.
     *
     * Simulate loan funding - for testing
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    simulateLoanFunding: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.simulateLoanFunding(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `isContractActive()uint64` ABI method.
     *
     * Platform status check - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isContractActive: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.isContractActive(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getActiveLoansCount()uint64` ABI method.
     *
     * Get active loans count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getActiveLoansCount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getActiveLoansCount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `togglePlatformStatus()string` ABI method.
     *
     * Admin function to toggle platform status - REAL state change
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    togglePlatformStatus: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string'] | AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.togglePlatformStatus(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `collectPlatformFees()string` ABI method.
     *
     * Admin function to collect platform fees - REAL ALGO transfer
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    collectPlatformFees: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string'] | AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.collectPlatformFees(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformFeesAmount()uint64` ABI method.
     *
     * Get platform fees amount
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformFeesAmount: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformFeesAmount(params))
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `testPlatform()string` ABI method.
     *
     * Test platform with real state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    testPlatform: (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string'] | AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoCreditPlatformTestNetParamsFactory.testPlatform(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoCreditPlatformTestNet smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `hello(string)string` ABI method.
     *
     * Simple hello method for testing
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['hello(string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `registerInvestor(string,uint64)string` ABI method.
     *
     * Register a new investor - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerInvestor: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.registerInvestor(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['registerInvestor(string,uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `registerStartup(string,string,uint64)string` ABI method.
     *
     * Register a new startup owner - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerStartup: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.registerStartup(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['registerStartup(string,string,uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `tokenizeStartup(string,uint64,uint64,string)string` ABI method.
     *
     * Tokenize a startup - Create tokenized investment opportunity
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    tokenizeStartup: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.tokenizeStartup(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['tokenizeStartup(string,uint64,uint64,string)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `requestLoan(uint64,uint64,uint64)string` ABI method.
     *
     * Create a loan request from startup - REAL implementation
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestLoan: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.requestLoan(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['requestLoan(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getInvestorCount()uint64` ABI method.
     *
     * Get investor count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getInvestorCount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getInvestorCount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getInvestorCount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getStartupCount()uint64` ABI method.
     *
     * Get startup count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStartupCount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getStartupCount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getStartupCount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTokenizedStartupsCount()uint64` ABI method.
     *
     * Get tokenized startups count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTokenizedStartupsCount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getTokenizedStartupsCount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getTokenizedStartupsCount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalInvestmentsCount()uint64` ABI method.
     *
     * Get total investments count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalInvestmentsCount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getTotalInvestmentsCount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getTotalInvestmentsCount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getLoanRequestCount()uint64` ABI method.
     *
     * Get loan requests count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLoanRequestCount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getLoanRequestCount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getLoanRequestCount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `investInStartup(uint64,uint64,uint64)string` ABI method.
     *
     * Invest in tokenized startup - REAL investment tracking
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    investInStartup: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.investInStartup(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['investInStartup(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realDeposit()string` ABI method.
     *
     * Real ALGO deposit - requires payment transaction
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    realDeposit: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string'] | AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.realDeposit(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['realDeposit()string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateDeposit(uint64)string` ABI method.
     *
     * Simulate deposit - for testing without payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    simulateDeposit: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.simulateDeposit(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['simulateDeposit(uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realWithdraw(uint64)string` ABI method.
     *
     * Real ALGO withdrawal - sends ALGO back to user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    realWithdraw: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.realWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['realWithdraw(uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateInvestment(uint64)string` ABI method.
     *
     * Simulate investment allocation - REAL GlobalState tracking
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    simulateInvestment: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.simulateInvestment(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['simulateInvestment(uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getAvailableFunds()uint64` ABI method.
     *
     * Get available funds - REAL calculation
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAvailableFunds: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getAvailableFunds(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getAvailableFunds()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalDeposited()uint64` ABI method.
     *
     * Get total deposited funds - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalDeposited: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getTotalDeposited(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getTotalDeposited()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getTotalInvested()uint64` ABI method.
     *
     * Get total invested funds - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalInvested: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getTotalInvested(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getTotalInvested()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformFees()uint64` ABI method.
     *
     * Get platform fees - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformFees: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformFees(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getPlatformFees()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics - REAL data
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformStats: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformStats(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getPlatformStats()string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getContractInfo()string` ABI method.
     *
     * Get detailed platform info
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractInfo: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getContractInfo(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getContractInfo()string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `realLoanFunding(uint64,uint64)string` ABI method.
     *
     * Real loan funding - sends ALGO to startup
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    realLoanFunding: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.realLoanFunding(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['realLoanFunding(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `simulateLoanFunding(uint64,uint64)string` ABI method.
     *
     * Simulate loan funding - for testing
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    simulateLoanFunding: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.simulateLoanFunding(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['simulateLoanFunding(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `isContractActive()uint64` ABI method.
     *
     * Platform status check - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isContractActive: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.isContractActive(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['isContractActive()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getActiveLoansCount()uint64` ABI method.
     *
     * Get active loans count - REAL from global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getActiveLoansCount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getActiveLoansCount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getActiveLoansCount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `togglePlatformStatus()string` ABI method.
     *
     * Admin function to toggle platform status - REAL state change
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    togglePlatformStatus: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string'] | AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.togglePlatformStatus(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['togglePlatformStatus()string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `collectPlatformFees()string` ABI method.
     *
     * Admin function to collect platform fees - REAL ALGO transfer
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    collectPlatformFees: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string'] | AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.collectPlatformFees(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['collectPlatformFees()string'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `getPlatformFeesAmount()uint64` ABI method.
     *
     * Get platform fees amount
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformFeesAmount: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.getPlatformFeesAmount(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['getPlatformFeesAmount()uint64'])}
    },

    /**
     * Makes a call to the AlgoCreditPlatformTestNet smart contract using the `testPlatform()string` ABI method.
     *
     * Test platform with real state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    testPlatform: async (params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string'] | AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoCreditPlatformTestNetParamsFactory.testPlatform(params))
      return {...result, return: result.return as unknown as (undefined | AlgoCreditPlatformTestNetReturns['testPlatform()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoCreditPlatformTestNetClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AlgoCreditPlatformTestNet app
   */
  state = {
    /**
     * Methods to access global state for the current AlgoCreditPlatformTestNet app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalInvestors: result.totalInvestors,
          totalStartups: result.totalStartups,
          totalTokenizedStartups: result.totalTokenizedStartups,
          totalFundsDeposited: result.totalFundsDeposited,
          totalFundsInvested: result.totalFundsInvested,
          totalLoanRequests: result.totalLoanRequests,
          totalActiveLoans: result.totalActiveLoans,
          totalInvestments: result.totalInvestments,
          platformFees: result.platformFees,
          contractActive: result.contractActive,
        }
      },
      /**
       * Get the current value of the totalInvestors key in global state
       */
      totalInvestors: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalInvestors")) as bigint | undefined },
      /**
       * Get the current value of the totalStartups key in global state
       */
      totalStartups: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStartups")) as bigint | undefined },
      /**
       * Get the current value of the totalTokenizedStartups key in global state
       */
      totalTokenizedStartups: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalTokenizedStartups")) as bigint | undefined },
      /**
       * Get the current value of the totalFundsDeposited key in global state
       */
      totalFundsDeposited: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalFundsDeposited")) as bigint | undefined },
      /**
       * Get the current value of the totalFundsInvested key in global state
       */
      totalFundsInvested: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalFundsInvested")) as bigint | undefined },
      /**
       * Get the current value of the totalLoanRequests key in global state
       */
      totalLoanRequests: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalLoanRequests")) as bigint | undefined },
      /**
       * Get the current value of the totalActiveLoans key in global state
       */
      totalActiveLoans: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalActiveLoans")) as bigint | undefined },
      /**
       * Get the current value of the totalInvestments key in global state
       */
      totalInvestments: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalInvestments")) as bigint | undefined },
      /**
       * Get the current value of the platformFees key in global state
       */
      platformFees: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("platformFees")) as bigint | undefined },
      /**
       * Get the current value of the contractActive key in global state
       */
      contractActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractActive")) as bigint | undefined },
    },
  }

  public newGroup(): AlgoCreditPlatformTestNetComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the AlgoCreditPlatformTestNet contract
       */
      hello(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['hello(string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a registerInvestor(string,uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      registerInvestor(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerInvestor(params)))
        resultMappers.push((v) => client.decodeReturnValue('registerInvestor(string,uint64)string', v))
        return this
      },
      /**
       * Add a registerStartup(string,string,uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      registerStartup(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerStartup(params)))
        resultMappers.push((v) => client.decodeReturnValue('registerStartup(string,string,uint64)string', v))
        return this
      },
      /**
       * Add a tokenizeStartup(string,uint64,uint64,string)string method call against the AlgoCreditPlatformTestNet contract
       */
      tokenizeStartup(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.tokenizeStartup(params)))
        resultMappers.push((v) => client.decodeReturnValue('tokenizeStartup(string,uint64,uint64,string)string', v))
        return this
      },
      /**
       * Add a requestLoan(uint64,uint64,uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      requestLoan(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestLoan(params)))
        resultMappers.push((v) => client.decodeReturnValue('requestLoan(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a getInvestorCount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getInvestorCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getInvestorCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getInvestorCount()uint64', v))
        return this
      },
      /**
       * Add a getStartupCount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getStartupCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStartupCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getStartupCount()uint64', v))
        return this
      },
      /**
       * Add a getTokenizedStartupsCount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getTokenizedStartupsCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTokenizedStartupsCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTokenizedStartupsCount()uint64', v))
        return this
      },
      /**
       * Add a getTotalInvestmentsCount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getTotalInvestmentsCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalInvestmentsCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalInvestmentsCount()uint64', v))
        return this
      },
      /**
       * Add a getLoanRequestCount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getLoanRequestCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanRequestCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanRequestCount()uint64', v))
        return this
      },
      /**
       * Add a investInStartup(uint64,uint64,uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      investInStartup(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.investInStartup(params)))
        resultMappers.push((v) => client.decodeReturnValue('investInStartup(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a realDeposit()string method call against the AlgoCreditPlatformTestNet contract
       */
      realDeposit(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string'] | AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.realDeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('realDeposit()string', v))
        return this
      },
      /**
       * Add a simulateDeposit(uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      simulateDeposit(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.simulateDeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('simulateDeposit(uint64)string', v))
        return this
      },
      /**
       * Add a realWithdraw(uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      realWithdraw(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.realWithdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('realWithdraw(uint64)string', v))
        return this
      },
      /**
       * Add a simulateInvestment(uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      simulateInvestment(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.simulateInvestment(params)))
        resultMappers.push((v) => client.decodeReturnValue('simulateInvestment(uint64)string', v))
        return this
      },
      /**
       * Add a getAvailableFunds()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getAvailableFunds(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAvailableFunds(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAvailableFunds()uint64', v))
        return this
      },
      /**
       * Add a getTotalDeposited()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getTotalDeposited(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDeposited(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalDeposited()uint64', v))
        return this
      },
      /**
       * Add a getTotalInvested()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getTotalInvested(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalInvested(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalInvested()uint64', v))
        return this
      },
      /**
       * Add a getPlatformFees()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getPlatformFees(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformFees(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformFees()uint64', v))
        return this
      },
      /**
       * Add a getPlatformStats()string method call against the AlgoCreditPlatformTestNet contract
       */
      getPlatformStats(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformStats()string', v))
        return this
      },
      /**
       * Add a getContractInfo()string method call against the AlgoCreditPlatformTestNet contract
       */
      getContractInfo(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractInfo()string', v))
        return this
      },
      /**
       * Add a realLoanFunding(uint64,uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      realLoanFunding(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.realLoanFunding(params)))
        resultMappers.push((v) => client.decodeReturnValue('realLoanFunding(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a simulateLoanFunding(uint64,uint64)string method call against the AlgoCreditPlatformTestNet contract
       */
      simulateLoanFunding(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.simulateLoanFunding(params)))
        resultMappers.push((v) => client.decodeReturnValue('simulateLoanFunding(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a isContractActive()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      isContractActive(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isContractActive(params)))
        resultMappers.push((v) => client.decodeReturnValue('isContractActive()uint64', v))
        return this
      },
      /**
       * Add a getActiveLoansCount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getActiveLoansCount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getActiveLoansCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getActiveLoansCount()uint64', v))
        return this
      },
      /**
       * Add a togglePlatformStatus()string method call against the AlgoCreditPlatformTestNet contract
       */
      togglePlatformStatus(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string'] | AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.togglePlatformStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('togglePlatformStatus()string', v))
        return this
      },
      /**
       * Add a collectPlatformFees()string method call against the AlgoCreditPlatformTestNet contract
       */
      collectPlatformFees(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string'] | AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.collectPlatformFees(params)))
        resultMappers.push((v) => client.decodeReturnValue('collectPlatformFees()string', v))
        return this
      },
      /**
       * Add a getPlatformFeesAmount()uint64 method call against the AlgoCreditPlatformTestNet contract
       */
      getPlatformFeesAmount(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformFeesAmount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformFeesAmount()uint64', v))
        return this
      },
      /**
       * Add a testPlatform()string method call against the AlgoCreditPlatformTestNet contract
       */
      testPlatform(params: CallParams<AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string'] | AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.testPlatform(params)))
        resultMappers.push((v) => client.decodeReturnValue('testPlatform()string', v))
        return this
      },
      /**
       * Add a clear state call to the AlgoCreditPlatformTestNet contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoCreditPlatformTestNetComposer
  }
}
export type AlgoCreditPlatformTestNetComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * Simple hello method for testing
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['hello(string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['hello(string)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['hello(string)string'] | undefined]>

  /**
   * Calls the registerInvestor(string,uint64)string ABI method.
   *
   * Register a new investor - REAL GlobalState tracking
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerInvestor(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerInvestor(string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerInvestor(string,uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['registerInvestor(string,uint64)string'] | undefined]>

  /**
   * Calls the registerStartup(string,string,uint64)string ABI method.
   *
   * Register a new startup owner - REAL GlobalState tracking
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerStartup(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['registerStartup(string,string,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['registerStartup(string,string,uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['registerStartup(string,string,uint64)string'] | undefined]>

  /**
   * Calls the tokenizeStartup(string,uint64,uint64,string)string ABI method.
   *
   * Tokenize a startup - Create tokenized investment opportunity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tokenizeStartup(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['tokenizeStartup(string,uint64,uint64,string)string'] | AlgoCreditPlatformTestNetArgs['tuple']['tokenizeStartup(string,uint64,uint64,string)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['tokenizeStartup(string,uint64,uint64,string)string'] | undefined]>

  /**
   * Calls the requestLoan(uint64,uint64,uint64)string ABI method.
   *
   * Create a loan request from startup - REAL implementation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestLoan(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['requestLoan(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['requestLoan(uint64,uint64,uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['requestLoan(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the getInvestorCount()uint64 ABI method.
   *
   * Get investor count - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInvestorCount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getInvestorCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getInvestorCount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getInvestorCount()uint64'] | undefined]>

  /**
   * Calls the getStartupCount()uint64 ABI method.
   *
   * Get startup count - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStartupCount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getStartupCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getStartupCount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getStartupCount()uint64'] | undefined]>

  /**
   * Calls the getTokenizedStartupsCount()uint64 ABI method.
   *
   * Get tokenized startups count - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenizedStartupsCount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTokenizedStartupsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTokenizedStartupsCount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getTokenizedStartupsCount()uint64'] | undefined]>

  /**
   * Calls the getTotalInvestmentsCount()uint64 ABI method.
   *
   * Get total investments count - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalInvestmentsCount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvestmentsCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvestmentsCount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getTotalInvestmentsCount()uint64'] | undefined]>

  /**
   * Calls the getLoanRequestCount()uint64 ABI method.
   *
   * Get loan requests count - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanRequestCount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getLoanRequestCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getLoanRequestCount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getLoanRequestCount()uint64'] | undefined]>

  /**
   * Calls the investInStartup(uint64,uint64,uint64)string ABI method.
   *
   * Invest in tokenized startup - REAL investment tracking
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  investInStartup(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['investInStartup(uint64,uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['investInStartup(uint64,uint64,uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['investInStartup(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the realDeposit()string ABI method.
   *
   * Real ALGO deposit - requires payment transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  realDeposit(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realDeposit()string'] | AlgoCreditPlatformTestNetArgs['tuple']['realDeposit()string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['realDeposit()string'] | undefined]>

  /**
   * Calls the simulateDeposit(uint64)string ABI method.
   *
   * Simulate deposit - for testing without payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  simulateDeposit(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateDeposit(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateDeposit(uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['simulateDeposit(uint64)string'] | undefined]>

  /**
   * Calls the realWithdraw(uint64)string ABI method.
   *
   * Real ALGO withdrawal - sends ALGO back to user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  realWithdraw(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realWithdraw(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realWithdraw(uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['realWithdraw(uint64)string'] | undefined]>

  /**
   * Calls the simulateInvestment(uint64)string ABI method.
   *
   * Simulate investment allocation - REAL GlobalState tracking
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  simulateInvestment(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateInvestment(uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateInvestment(uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['simulateInvestment(uint64)string'] | undefined]>

  /**
   * Calls the getAvailableFunds()uint64 ABI method.
   *
   * Get available funds - REAL calculation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAvailableFunds(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getAvailableFunds()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getAvailableFunds()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getAvailableFunds()uint64'] | undefined]>

  /**
   * Calls the getTotalDeposited()uint64 ABI method.
   *
   * Get total deposited funds - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDeposited(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalDeposited()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalDeposited()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getTotalDeposited()uint64'] | undefined]>

  /**
   * Calls the getTotalInvested()uint64 ABI method.
   *
   * Get total invested funds - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalInvested(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getTotalInvested()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getTotalInvested()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getTotalInvested()uint64'] | undefined]>

  /**
   * Calls the getPlatformFees()uint64 ABI method.
   *
   * Get platform fees - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformFees(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFees()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFees()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getPlatformFees()uint64'] | undefined]>

  /**
   * Calls the getPlatformStats()string ABI method.
   *
   * Get platform statistics - REAL data
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformStats(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformStats()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformStats()string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getPlatformStats()string'] | undefined]>

  /**
   * Calls the getContractInfo()string ABI method.
   *
   * Get detailed platform info
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractInfo(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getContractInfo()string'] | AlgoCreditPlatformTestNetArgs['tuple']['getContractInfo()string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getContractInfo()string'] | undefined]>

  /**
   * Calls the realLoanFunding(uint64,uint64)string ABI method.
   *
   * Real loan funding - sends ALGO to startup
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  realLoanFunding(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['realLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['realLoanFunding(uint64,uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['realLoanFunding(uint64,uint64)string'] | undefined]>

  /**
   * Calls the simulateLoanFunding(uint64,uint64)string ABI method.
   *
   * Simulate loan funding - for testing
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  simulateLoanFunding(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['simulateLoanFunding(uint64,uint64)string'] | AlgoCreditPlatformTestNetArgs['tuple']['simulateLoanFunding(uint64,uint64)string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['simulateLoanFunding(uint64,uint64)string'] | undefined]>

  /**
   * Calls the isContractActive()uint64 ABI method.
   *
   * Platform status check - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isContractActive(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['isContractActive()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['isContractActive()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['isContractActive()uint64'] | undefined]>

  /**
   * Calls the getActiveLoansCount()uint64 ABI method.
   *
   * Get active loans count - REAL from global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getActiveLoansCount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getActiveLoansCount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getActiveLoansCount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getActiveLoansCount()uint64'] | undefined]>

  /**
   * Calls the togglePlatformStatus()string ABI method.
   *
   * Admin function to toggle platform status - REAL state change
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  togglePlatformStatus(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['togglePlatformStatus()string'] | AlgoCreditPlatformTestNetArgs['tuple']['togglePlatformStatus()string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['togglePlatformStatus()string'] | undefined]>

  /**
   * Calls the collectPlatformFees()string ABI method.
   *
   * Admin function to collect platform fees - REAL ALGO transfer
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  collectPlatformFees(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['collectPlatformFees()string'] | AlgoCreditPlatformTestNetArgs['tuple']['collectPlatformFees()string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['collectPlatformFees()string'] | undefined]>

  /**
   * Calls the getPlatformFeesAmount()uint64 ABI method.
   *
   * Get platform fees amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformFeesAmount(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['getPlatformFeesAmount()uint64'] | AlgoCreditPlatformTestNetArgs['tuple']['getPlatformFeesAmount()uint64']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['getPlatformFeesAmount()uint64'] | undefined]>

  /**
   * Calls the testPlatform()string ABI method.
   *
   * Test platform with real state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  testPlatform(params?: CallParams<AlgoCreditPlatformTestNetArgs['obj']['testPlatform()string'] | AlgoCreditPlatformTestNetArgs['tuple']['testPlatform()string']>): AlgoCreditPlatformTestNetComposer<[...TReturns, AlgoCreditPlatformTestNetReturns['testPlatform()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AlgoCreditPlatformTestNet smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoCreditPlatformTestNetComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoCreditPlatformTestNetComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoCreditPlatformTestNetComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoCreditPlatformTestNetComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoCreditPlatformTestNetComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoCreditPlatformTestNetComposerResults<TReturns>>
}
export type AlgoCreditPlatformTestNetComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

