{
    "name": "AlgoCreditPlatformTestNet",
    "structs": {},
    "methods": [
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Simple hello method for testing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "registerInvestor",
            "args": [
                {
                    "type": "string",
                    "name": "investorType"
                },
                {
                    "type": "uint64",
                    "name": "riskLevel"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Register a new investor - REAL GlobalState tracking",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "registerStartup",
            "args": [
                {
                    "type": "string",
                    "name": "startupName"
                },
                {
                    "type": "string",
                    "name": "industry"
                },
                {
                    "type": "uint64",
                    "name": "requestedAmount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Register a new startup owner - REAL GlobalState tracking",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tokenizeStartup",
            "args": [
                {
                    "type": "string",
                    "name": "startupName"
                },
                {
                    "type": "uint64",
                    "name": "tokenPrice"
                },
                {
                    "type": "uint64",
                    "name": "totalSupply"
                },
                {
                    "type": "string",
                    "name": "industry"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Tokenize a startup - Create tokenized investment opportunity",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "requestLoan",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "duration"
                },
                {
                    "type": "uint64",
                    "name": "interestRate"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a loan request from startup - REAL implementation",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getInvestorCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get investor count - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStartupCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get startup count - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTokenizedStartupsCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get tokenized startups count - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTotalInvestmentsCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total investments count - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLoanRequestCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get loan requests count - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "investInStartup",
            "args": [
                {
                    "type": "uint64",
                    "name": "startupId"
                },
                {
                    "type": "uint64",
                    "name": "investmentAmount"
                },
                {
                    "type": "uint64",
                    "name": "tokenAmount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Invest in tokenized startup - REAL investment tracking",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "realDeposit",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Real ALGO deposit - requires payment transaction",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "simulateDeposit",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Simulate deposit - for testing without payment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "realWithdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Real ALGO withdrawal - sends ALGO back to user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "simulateInvestment",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Simulate investment allocation - REAL GlobalState tracking",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAvailableFunds",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get available funds - REAL calculation",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTotalDeposited",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total deposited funds - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTotalInvested",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total invested funds - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlatformFees",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get platform fees - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlatformStats",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get platform statistics - REAL data",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractInfo",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get detailed platform info",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "realLoanFunding",
            "args": [
                {
                    "type": "uint64",
                    "name": "loanId"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Real loan funding - sends ALGO to startup",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "simulateLoanFunding",
            "args": [
                {
                    "type": "uint64",
                    "name": "loanId"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Simulate loan funding - for testing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isContractActive",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Platform status check - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getActiveLoansCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get active loans count - REAL from global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "togglePlatformStatus",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Admin function to toggle platform status - REAL state change",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "collectPlatformFees",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Admin function to collect platform fees - REAL ALGO transfer",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlatformFeesAmount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get platform fees amount",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "testPlatform",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Test platform with real state",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 10,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "totalInvestors": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxJbnZlc3RvcnM="
                },
                "totalStartups": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdGFydHVwcw=="
                },
                "totalTokenizedStartups": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxUb2tlbml6ZWRTdGFydHVwcw=="
                },
                "totalFundsDeposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxGdW5kc0RlcG9zaXRlZA=="
                },
                "totalFundsInvested": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxGdW5kc0ludmVzdGVk"
                },
                "totalLoanRequests": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxMb2FuUmVxdWVzdHM="
                },
                "totalActiveLoans": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxBY3RpdmVMb2Fucw=="
                },
                "totalInvestments": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxJbnZlc3RtZW50cw=="
                },
                "platformFees": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxhdGZvcm1GZWVz"
                },
                "contractActive": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RBY3RpdmU="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        570,
                        594,
                        611,
                        635,
                        659,
                        676,
                        700,
                        732,
                        764,
                        828,
                        852,
                        869,
                        886,
                        903,
                        920,
                        948,
                        976,
                        1004,
                        1028,
                        1064,
                        1081,
                        1098,
                        1115,
                        1132,
                        1149,
                        1185,
                        1229,
                        1269,
                        1303
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1338
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        573,
                        597,
                        614,
                        638,
                        662,
                        679,
                        703,
                        735,
                        767,
                        831,
                        855,
                        872,
                        889,
                        906,
                        923,
                        951,
                        979,
                        1007,
                        1031,
                        1067,
                        1084,
                        1101,
                        1118,
                        1135,
                        1152,
                        1188,
                        1232,
                        1272,
                        1306
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1417,
                        1550,
                        1702,
                        1754,
                        1959,
                        2006,
                        2012,
                        2018,
                        2024,
                        2030,
                        2122,
                        2133,
                        2143,
                        2153,
                        2200,
                        2322,
                        2418,
                        2422,
                        2519,
                        2583,
                        2587,
                        2644,
                        2690,
                        2694,
                        2700,
                        2705,
                        2710,
                        2719,
                        2727,
                        2833,
                        2837,
                        2851,
                        2862,
                        2872,
                        2950,
                        2954,
                        2968,
                        2979,
                        2989,
                        3040,
                        3046,
                        3107,
                        3193,
                        3199
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}