{
  "version": 3,
  "sources": [
    "/Users/ahmetbugrakurnaz/Desktop/algorand/algo-contract/projects/algo-contract/smart_contracts/algo_smartcontract/contract.algo.ts"
  ],
  "mappingscE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA1XF;;;AAAA;AAAA;;;AAAA;AA0XE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA3VF;;;AAAA;AAAA;;;AAAA;AA2VE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAtRF;;;AAAA;AAsRE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA1PF;;;AAAA;AA0PE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAtOF;;;AAAA;AAsOE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AArLF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAqLE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AA3GF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA2GE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAxFF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAwFE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AApEF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAoEE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA3CF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA2CE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA5BF;;;AAAA;;;AAAA;;;AAAA;AA4BE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AApBF;;;AAAA;;;AAoBE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAoBE;;;AACS;;;;;;;;;AAAA;;AAAA;AAAP;AAOF;;;AAEM;;AAAY;AAAZ;AAAA;;;AAAiB;;AAAY;;AAAZ;AAAjB;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA7BJ;AAAA;;AAAA;AAAA;AAiC0D;AAA5B;AAjC9B;;AAiCE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AA/BA;AAAA;;AAAA;AAAA;AAiCsD;AAA1B;AAjC5B;;AAiCE;AAAA;AAGO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAoD;;;;;;;;;AAApD;AAAA;;AAAA;AAAP;AApCF;AAAA;;AAAA;AAAA;AA2CE;AAaF;;;AAEM;;AAAkB;AAAlB;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAkB;;AAAlB;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAzEJ;AAAA;;AAAA;AAAA;AA6EwD;AAA3B;AA7E7B;;AA6EE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAoD;;;;;;AAApD;AAAA;;AAAA;AAAP;AAMF;;;AAEM;;AAAc;AAAd;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGE;;AAAe;AAAf;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA3FJ;AAAA;;AAAA;AAAA;AA+F0E;AAApC;AA/FtC;;AA+FE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAMF;;;AAhGA;AAAA;;AAAA;AAAA;AAkGE;;;AACS;;AAAP;AAIE;;AAAS;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGE;;AAAS;;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAW;AAAX;AAAA;;;AAAgB;;AAAW;;AAAX;AAAhB;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAe;AAAf;AAAA;;;AAAoB;;AAAe;;AAAf;AAApB;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA1HJ;AAAA;;AAAA;AAAA;AA8HgE;AAA/B;AA9HjC;;AA8HE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AArIF;AAAA;;AAAA;AAAA;AA6IE;AA5IF;AAAA;;AAAA;AAAA;AAoJE;AAnJF;AAAA;;AAAA;AAAA;AA2JE;AAtJF;AAAA;;AAAA;AAAA;AA8JE;AAhKF;AAAA;;AAAA;AAAA;AAwKE;AAMF;;;AAEM;;AAAoB;AAApB;AAAJ;;;AACS;;AAAP;AAGE;;AAAe;AAAf;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGE;;AAAa;AAAb;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;AAAP;AArLJ;AAAA;;AAAA;AAAA;AAyLE;;;AACS;;AAAP;AA5LJ;AAAA;;AAAA;AAAA;AAgM8D;AAA9B;AAhMhC;;AAgME;AAAA;AAnMF;AAAA;AAAA;AAAA;AAoMkC;;AAAA;AApMlC;AAoME;AAAA;AAhMF;AAAA;AAAA;AAAA;AAmMuD;;AAAmB;AAAnB;AAA3B;AAnM5B;AAmME;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA1MF;AAAA;AAAA;AAAA;AAyNoE;AAAjC;AAzNnC;AAyNE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAS;;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAzOJ;AAAA;AAAA;AAAA;AA6OmC;;AAAA;AA7OnC;AA6OE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAxPJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA2Pe;AAAT;;AAAA;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAS;;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAlQJ;AAAA;AAAA;AAAA;AAsQmC;;AAAA;AAtQnC;AAsQE;AAAA;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AApRJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAuRe;AAAT;;AAAA;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAxRJ;AAAA;AAAA;AAAA;AA4RkC;;AAAA;AA5RlC;AA4RE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA/RF;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAqSS;AAAP;AAtSF;AAAA;AAAA;AAAA;AA6SE;AA5SF;AAAA;AAAA;AAAA;AAmTE;AA/SF;AAAA;AAAA;AAAA;AAsTE;AAMF;;;AApUA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAuUM;;;AAAA;;AAAA;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAGK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAaF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AAGE;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AA7VJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAgWe;AAAT;;AAAA;AAAJ;;;AACS;;AAAP;AAjWJ;AAAA;AAAA;AAAA;AAqWkC;;AAAA;AArWlC;AAqWE;AAAA;AAnWF;AAAA;;AAAA;AAAA;AAoW8D;AAA9B;AApWhC;;AAoWE;AAAA;AAlWF;AAAA;AAAA;AAAA;AAqWuD;;AAAS;AAAT;AAA3B;AArW5B;AAqWE;AAAA;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AAGE;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AA5XJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA+Xe;AAAT;;AAAA;AAAJ;;;AACS;;AAAP;AAhYJ;AAAA;AAAA;AAAA;AAoYkC;;AAAA;AApYlC;AAoYE;AAAA;AAlYF;AAAA;;AAAA;AAAA;AAmY8D;AAA9B;AAnYhC;;AAmYE;AAAA;AAjYF;AAAA;AAAA;AAAA;AAoYuD;;AAAS;AAAT;AAA3B;AApY5B;AAoYE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAxYF;AAAA;;AAAA;AAAA;AAwZE;AArZF;AAAA;;AAAA;AAAA;AA4ZoC;AAA9B;AAAJ;;;AA5ZF;;AA6ZgC;AAA5B;AACO;;;;;;;;;;;;;;;;;;;;;;AAAP;AA9ZJ;;AAgagC;AAA5B;AACO;;;;;;;;;;;;;;;;;;;;AAAP;AAlaJ;AAAA;AAAA;AAAA;AA4ac;AAAR;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA7aJ;AAib4B;AAA1B;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAtbF;AAAA;AAAA;AAAA;AA6bE;AA5bF;AAAA;;AAAA;AAAA;AAociB;AAAX;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000000 50 1000000000 100000"
    },
    "17": {
      "op": "bytecblock 0x151f7c75 \"totalFundsInvested\" \"totalFundsDeposited\" \"platformFees\" \"contractActive\" \"totalActiveLoans\" \"totalInvestors\" \"totalStartups\" \"totalApiKeys\" \"totalTokenizedStartups\" \"totalLoanRequests\" \"totalInvestments\" 0x151f7c750000000000000001 \"Platform is currently inactive\" \"Investment amount must be greater than 0\" \"Funding amount must be greater than 0\" \"Invalid loan ID\" \"Insufficient available funds\""
    },
    "376": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "378": {
      "op": "bz main_bare_routing@37",
      "stack_out": []
    },
    "381": {
      "op": "pushbytess 0x02bece11 0xf43287ab 0x881eb5af 0x9e641817 0x94f0ea89 0x7eac1ca1 0x1f523c74 0xff8437eb 0xf59c7cec 0x7fa0dca0 0xa14ba69d 0x64e2bb78 0xa57c633e 0x9ad40acb 0x9824c702 0x1b294dcc 0x790f3af8 0x45e19fa9 0xcb45a8b7 0x587aa573 0xe476d182 0xee57c82c 0x11237b48 0xbe5e72a0 0xd7a79c2f 0xc5dcad3f 0x8a1dac4b 0x5c8ee5d2 0xee7a7d04 0xf65cc277 0x09c3d5fd 0x8052215e // method \"hello(string)string\", method \"registerInvestor(string,uint64)string\", method \"registerApiKey(string,string,string)string\", method \"getApiKeyCount()uint64\", method \"canGenerateApiKey(string)uint64\", method \"registerStartup(string,string,uint64)string\", method \"tokenizeStartup(string,uint64,uint64,string)string\", method \"requestLoan(uint64,uint64,uint64)string\", method \"getInvestorCount()uint64\", method \"getStartupCount()uint64\", method \"getTokenizedStartupsCount()uint64\", method \"getTotalInvestmentsCount()uint64\", method \"getLoanRequestCount()uint64\", method \"investInStartup(uint64,uint64,uint64)string\", method \"realDeposit()string\", method \"simulateDeposit(uint64)string\", method \"realWithdraw(uint64)string\", method \"simulateInvestment(uint64)string\", method \"getAvailableFunds()uint64\", method \"getTotalDeposited()uint64\", method \"getTotalInvested()uint64\", method \"getPlatformFees()uint64\", method \"getPlatformStats()string\", method \"getContractInfo()string\", method \"realLoanFunding(uint64,uint64)string\", method \"simulateLoanFunding(uint64,uint64)string\", method \"isContractActive()uint64\", method \"getActiveLoansCount()uint64\", method \"togglePlatformStatus()string\", method \"collectPlatformFees()string\", method \"getPlatformFeesAmount()uint64\", method \"testPlatform()string\"",
      "defined_out": [
        "Method(canGenerateApiKey(string)uint64)",
        "Method(collectPlatformFees()string)",
        "Method(getActiveLoansCount()uint64)",
        "Method(getApiKeyCount()uint64)",
        "Method(getAvailableFunds()uint64)",
        "Method(getContractInfo()string)",
        "Method(getInvestorCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(hello(string)string)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(realDeposit()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(registerApiKey(string,string,string)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(testPlatform()string)",
        "Method(togglePlatformStatus()string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerApiKey(string,string,string)string)",
        "Method(getApiKeyCount()uint64)",
        "Method(canGenerateApiKey(string)uint64)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(getInvestorCount()uint64)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(realDeposit()string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(getAvailableFunds()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getContractInfo()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(getActiveLoansCount()uint64)",
        "Method(togglePlatformStatus()string)",
        "Method(collectPlatformFees()string)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(testPlatform()string)"
      ]
    },
    "543": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(canGenerateApiKey(string)uint64)",
        "Method(collectPlatformFees()string)",
        "Method(getActiveLoansCount()uint64)",
        "Method(getApiKeyCount()uint64)",
        "Method(getAvailableFunds()uint64)",
        "Method(getContractInfo()string)",
        "Method(getInvestorCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(hello(string)string)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(realDeposit()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(registerApiKey(string,string,string)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(testPlatform()string)",
        "Method(togglePlatformStatus()string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerApiKey(string,string,string)string)",
        "Method(getApiKeyCount()uint64)",
        "Method(canGenerateApiKey(string)uint64)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(getInvestorCount()uint64)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(realDeposit()string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(getAvailableFunds()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getContractInfo()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(getActiveLoansCount()uint64)",
        "Method(togglePlatformStatus()string)",
        "Method(collectPlatformFees()string)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(testPlatform()string)",
        "tmp%2#0"
      ]
    },
    "546": {
      "op": "match main_hello_route@3 main_registerInvestor_route@4 main_registerApiKey_route@5 main_getApiKeyCount_route@6 main_canGenerateApiKey_route@7 main_registerStartup_route@8 main_tokenizeStartup_route@9 main_requestLoan_route@10 main_getInvestorCount_route@11 main_getStartupCount_route@12 main_getTokenizedStartupsCount_route@13 main_getTotalInvestmentsCount_route@14 main_getLoanRequestCount_route@15 main_investInStartup_route@16 main_realDeposit_route@17 main_simulateDeposit_route@18 main_realWithdraw_route@19 main_simulateInvestment_route@20 main_getAvailableFunds_route@21 main_getTotalDeposited_route@22 main_getTotalInvested_route@23 main_getPlatformFees_route@24 main_getPlatformStats_route@25 main_getContractInfo_route@26 main_realLoanFunding_route@27 main_simulateLoanFunding_route@28 main_isContractActive_route@29 main_getActiveLoansCount_route@30 main_togglePlatformStatus_route@31 main_collectPlatformFees_route@32 main_getPlatformFeesAmount_route@33 main_testPlatform_route@34",
      "stack_out": []
    },
    "612": {
      "block": "main_after_if_else@41",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "613": {
      "op": "return",
      "stack_out": []
    },
    "614": {
      "block": "main_testPlatform_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "616": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "617": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "618": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "620": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "621": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.testPlatform",
      "op": "callsub testPlatform",
      "defined_out": [
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0"
      ]
    },
    "624": {
      "op": "dup",
      "defined_out": [
        "to_encode%31#0",
        "to_encode%31#0 (copy)"
      ],
      "stack_out": [
        "to_encode%31#0",
        "to_encode%31#0 (copy)"
      ]
    },
    "625": {
      "op": "len",
      "defined_out": [
        "length%17#0",
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0",
        "length%17#0"
      ]
    },
    "626": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0",
        "as_bytes%17#0"
      ]
    },
    "627": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%17#0",
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0",
        "length_uint16%17#0"
      ]
    },
    "630": {
      "op": "swap",
      "stack_out": [
        "length_uint16%17#0",
        "to_encode%31#0"
      ]
    },
    "631": {
      "op": "concat",
      "defined_out": [
        "encoded_value%17#0"
      ],
      "stack_out": [
        "encoded_value%17#0"
      ]
    },
    "632": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%17#0"
      ],
      "stack_out": [
        "encoded_value%17#0",
        "0x151f7c75"
      ]
    },
    "633": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%17#0"
      ]
    },
    "634": {
      "op": "concat",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "635": {
      "op": "log",
      "stack_out": []
    },
    "636": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "637": {
      "op": "return",
      "stack_out": []
    },
    "638": {
      "block": "main_getPlatformFeesAmount_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "640": {
      "op": "!",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "641": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "642": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "644": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "645": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFeesAmount",
      "op": "callsub getPlatformFeesAmount",
      "defined_out": [
        "to_encode%30#0"
      ],
      "stack_out": [
        "to_encode%30#0"
      ]
    },
    "648": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "val_as_bytes%13#0"
      ]
    },
    "649": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "val_as_bytes%13#0",
        "0x151f7c75"
      ]
    },
    "650": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%13#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "652": {
      "op": "log",
      "stack_out": []
    },
    "653": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "654": {
      "op": "return",
      "stack_out": []
    },
    "655": {
      "block": "main_collectPlatformFees_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "657": {
      "op": "!",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "658": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "659": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "661": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "662": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.collectPlatformFees",
      "op": "callsub collectPlatformFees",
      "defined_out": [
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0"
      ]
    },
    "665": {
      "op": "dup",
      "defined_out": [
        "to_encode%29#0",
        "to_encode%29#0 (copy)"
      ],
      "stack_out": [
        "to_encode%29#0",
        "to_encode%29#0 (copy)"
      ]
    },
    "666": {
      "op": "len",
      "defined_out": [
        "length%16#0",
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0",
        "length%16#0"
      ]
    },
    "667": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0",
        "as_bytes%16#0"
      ]
    },
    "668": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%16#0",
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0",
        "length_uint16%16#0"
      ]
    },
    "671": {
      "op": "swap",
      "stack_out": [
        "length_uint16%16#0",
        "to_encode%29#0"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "encoded_value%16#0"
      ],
      "stack_out": [
        "encoded_value%16#0"
      ]
    },
    "673": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%16#0"
      ],
      "stack_out": [
        "encoded_value%16#0",
        "0x151f7c75"
      ]
    },
    "674": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%16#0"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "676": {
      "op": "log",
      "stack_out": []
    },
    "677": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "678": {
      "op": "return",
      "stack_out": []
    },
    "679": {
      "block": "main_togglePlatformStatus_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "681": {
      "op": "!",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "682": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "683": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "685": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "686": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.togglePlatformStatus",
      "op": "callsub togglePlatformStatus",
      "defined_out": [
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0"
      ]
    },
    "689": {
      "op": "dup",
      "defined_out": [
        "to_encode%28#0",
        "to_encode%28#0 (copy)"
      ],
      "stack_out": [
        "to_encode%28#0",
        "to_encode%28#0 (copy)"
      ]
    },
    "690": {
      "op": "len",
      "defined_out": [
        "length%15#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "length%15#0"
      ]
    },
    "691": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "as_bytes%15#0"
      ]
    },
    "692": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%15#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "length_uint16%15#0"
      ]
    },
    "695": {
      "op": "swap",
      "stack_out": [
        "length_uint16%15#0",
        "to_encode%28#0"
      ]
    },
    "696": {
      "op": "concat",
      "defined_out": [
        "encoded_value%15#0"
      ],
      "stack_out": [
        "encoded_value%15#0"
      ]
    },
    "697": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%15#0"
      ],
      "stack_out": [
        "encoded_value%15#0",
        "0x151f7c75"
      ]
    },
    "698": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%15#0"
      ]
    },
    "699": {
      "op": "concat",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "700": {
      "op": "log",
      "stack_out": []
    },
    "701": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "702": {
      "op": "return",
      "stack_out": []
    },
    "703": {
      "block": "main_getActiveLoansCount_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "705": {
      "op": "!",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "706": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "707": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "709": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "710": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getActiveLoansCount",
      "op": "callsub getActiveLoansCount",
      "defined_out": [
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0"
      ]
    },
    "713": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0"
      ]
    },
    "714": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "0x151f7c75"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "717": {
      "op": "log",
      "stack_out": []
    },
    "718": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "719": {
      "op": "return",
      "stack_out": []
    },
    "720": {
      "block": "main_isContractActive_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "722": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "723": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "724": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "726": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "727": {
      "op": "bytec 12 // 0x151f7c750000000000000001",
      "defined_out": [
        "0x151f7c750000000000000001"
      ],
      "stack_out": [
        "0x151f7c750000000000000001"
      ]
    },
    "729": {
      "op": "log",
      "stack_out": []
    },
    "730": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "731": {
      "op": "return",
      "stack_out": []
    },
    "732": {
      "block": "main_simulateLoanFunding_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "734": {
      "op": "!",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "735": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "736": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "738": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "739": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "742": {
      "op": "btoi",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "743": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "746": {
      "op": "btoi",
      "defined_out": [
        "tmp%167#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%167#0",
        "tmp%168#0"
      ]
    },
    "747": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateLoanFunding",
      "op": "callsub simulateLoanFunding",
      "defined_out": [
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0"
      ]
    },
    "750": {
      "op": "dup",
      "defined_out": [
        "to_encode%25#0",
        "to_encode%25#0 (copy)"
      ],
      "stack_out": [
        "to_encode%25#0",
        "to_encode%25#0 (copy)"
      ]
    },
    "751": {
      "op": "len",
      "defined_out": [
        "length%14#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "length%14#0"
      ]
    },
    "752": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "as_bytes%14#0"
      ]
    },
    "753": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%14#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "length_uint16%14#0"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "length_uint16%14#0",
        "to_encode%25#0"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "encoded_value%14#0"
      ],
      "stack_out": [
        "encoded_value%14#0"
      ]
    },
    "758": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%14#0"
      ],
      "stack_out": [
        "encoded_value%14#0",
        "0x151f7c75"
      ]
    },
    "759": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%14#0"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "761": {
      "op": "log",
      "stack_out": []
    },
    "762": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "763": {
      "op": "return",
      "stack_out": []
    },
    "764": {
      "block": "main_realLoanFunding_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "766": {
      "op": "!",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "767": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "768": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "770": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "771": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "774": {
      "op": "btoi",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "775": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "778": {
      "op": "btoi",
      "defined_out": [
        "tmp%160#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%160#0",
        "tmp%161#0"
      ]
    },
    "779": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realLoanFunding",
      "op": "callsub realLoanFunding",
      "defined_out": [
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0"
      ]
    },
    "782": {
      "op": "dup",
      "defined_out": [
        "to_encode%24#0",
        "to_encode%24#0 (copy)"
      ],
      "stack_out": [
        "to_encode%24#0",
        "to_encode%24#0 (copy)"
      ]
    },
    "783": {
      "op": "len",
      "defined_out": [
        "length%13#0",
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0",
        "length%13#0"
      ]
    },
    "784": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0",
        "as_bytes%13#0"
      ]
    },
    "785": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%13#0",
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0",
        "length_uint16%13#0"
      ]
    },
    "788": {
      "op": "swap",
      "stack_out": [
        "length_uint16%13#0",
        "to_encode%24#0"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "encoded_value%13#0"
      ],
      "stack_out": [
        "encoded_value%13#0"
      ]
    },
    "790": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%13#0"
      ],
      "stack_out": [
        "encoded_value%13#0",
        "0x151f7c75"
      ]
    },
    "791": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%13#0"
      ]
    },
    "792": {
      "op": "concat",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "793": {
      "op": "log",
      "stack_out": []
    },
    "794": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "return",
      "stack_out": []
    },
    "796": {
      "block": "main_getContractInfo_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "798": {
      "op": "!",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "799": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "800": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "802": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "803": {
      "op": "pushbytes 0x151f7c75002e416c676f43726564697420506c6174666f726d2076332e30202d205265616c205061796d656e7473205265616479",
      "defined_out": [
        "0x151f7c75002e416c676f43726564697420506c6174666f726d2076332e30202d205265616c205061796d656e7473205265616479"
      ],
      "stack_out": [
        "0x151f7c75002e416c676f43726564697420506c6174666f726d2076332e30202d205265616c205061796d656e7473205265616479"
      ]
    },
    "857": {
      "op": "log",
      "stack_out": []
    },
    "858": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "859": {
      "op": "return",
      "stack_out": []
    },
    "860": {
      "block": "main_getPlatformStats_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "862": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "863": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "864": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "866": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "867": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformStats",
      "op": "callsub getPlatformStats",
      "defined_out": [
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0"
      ]
    },
    "870": {
      "op": "dup",
      "defined_out": [
        "to_encode%22#0",
        "to_encode%22#0 (copy)"
      ],
      "stack_out": [
        "to_encode%22#0",
        "to_encode%22#0 (copy)"
      ]
    },
    "871": {
      "op": "len",
      "defined_out": [
        "length%11#0",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "length%11#0"
      ]
    },
    "872": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "as_bytes%11#0"
      ]
    },
    "873": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%11#0",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "length_uint16%11#0"
      ]
    },
    "876": {
      "op": "swap",
      "stack_out": [
        "length_uint16%11#0",
        "to_encode%22#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0"
      ]
    },
    "878": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0",
        "0x151f7c75"
      ]
    },
    "879": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ]
    },
    "880": {
      "op": "concat",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "881": {
      "op": "log",
      "stack_out": []
    },
    "882": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "883": {
      "op": "return",
      "stack_out": []
    },
    "884": {
      "block": "main_getPlatformFees_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "886": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "887": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "888": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "890": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "891": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFees",
      "op": "callsub getPlatformFees",
      "defined_out": [
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0"
      ]
    },
    "894": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0"
      ]
    },
    "895": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ]
    },
    "897": {
      "op": "concat",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "898": {
      "op": "log",
      "stack_out": []
    },
    "899": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "900": {
      "op": "return",
      "stack_out": []
    },
    "901": {
      "block": "main_getTotalInvested_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "903": {
      "op": "!",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "904": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "905": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "907": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "908": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvested",
      "op": "callsub getTotalInvested",
      "defined_out": [
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0"
      ]
    },
    "911": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0"
      ]
    },
    "912": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "0x151f7c75"
      ]
    },
    "913": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%9#0"
      ]
    },
    "914": {
      "op": "concat",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "915": {
      "op": "log",
      "stack_out": []
    },
    "916": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "917": {
      "op": "return",
      "stack_out": []
    },
    "918": {
      "block": "main_getTotalDeposited_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "920": {
      "op": "!",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "921": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "922": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "924": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "925": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalDeposited",
      "op": "callsub getTotalDeposited",
      "defined_out": [
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0"
      ]
    },
    "928": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0"
      ]
    },
    "929": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "0x151f7c75"
      ]
    },
    "930": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ]
    },
    "931": {
      "op": "concat",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "932": {
      "op": "log",
      "stack_out": []
    },
    "933": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "934": {
      "op": "return",
      "stack_out": []
    },
    "935": {
      "block": "main_getAvailableFunds_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "937": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "938": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "939": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "941": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "942": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getAvailableFunds",
      "op": "callsub getAvailableFunds",
      "defined_out": [
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0"
      ]
    },
    "945": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0"
      ]
    },
    "946": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "947": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "949": {
      "op": "log",
      "stack_out": []
    },
    "950": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "op": "return",
      "stack_out": []
    },
    "952": {
      "block": "main_simulateInvestment_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "954": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "955": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "956": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "958": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "959": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "962": {
      "op": "btoi",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "963": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateInvestment",
      "op": "callsub simulateInvestment",
      "defined_out": [
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0"
      ]
    },
    "966": {
      "op": "dup",
      "defined_out": [
        "to_encode%17#0",
        "to_encode%17#0 (copy)"
      ],
      "stack_out": [
        "to_encode%17#0",
        "to_encode%17#0 (copy)"
      ]
    },
    "967": {
      "op": "len",
      "defined_out": [
        "length%10#0",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "length%10#0"
      ]
    },
    "968": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "as_bytes%10#0"
      ]
    },
    "969": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%10#0",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "length_uint16%10#0"
      ]
    },
    "972": {
      "op": "swap",
      "stack_out": [
        "length_uint16%10#0",
        "to_encode%17#0"
      ]
    },
    "973": {
      "op": "concat",
      "defined_out": [
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0"
      ]
    },
    "974": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "0x151f7c75"
      ]
    },
    "975": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ]
    },
    "976": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "977": {
      "op": "log",
      "stack_out": []
    },
    "978": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "979": {
      "op": "return",
      "stack_out": []
    },
    "980": {
      "block": "main_realWithdraw_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "982": {
      "op": "!",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "983": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "984": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "986": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "987": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "990": {
      "op": "btoi",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "991": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realWithdraw",
      "op": "callsub realWithdraw",
      "defined_out": [
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0"
      ]
    },
    "994": {
      "op": "dup",
      "defined_out": [
        "to_encode%16#0",
        "to_encode%16#0 (copy)"
      ],
      "stack_out": [
        "to_encode%16#0",
        "to_encode%16#0 (copy)"
      ]
    },
    "995": {
      "op": "len",
      "defined_out": [
        "length%9#0",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "length%9#0"
      ]
    },
    "996": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "as_bytes%9#0"
      ]
    },
    "997": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%9#0",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "length_uint16%9#0"
      ]
    },
    "1000": {
      "op": "swap",
      "stack_out": [
        "length_uint16%9#0",
        "to_encode%16#0"
      ]
    },
    "1001": {
      "op": "concat",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "1002": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "0x151f7c75"
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ]
    },
    "1004": {
      "op": "concat",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1005": {
      "op": "log",
      "stack_out": []
    },
    "1006": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1007": {
      "op": "return",
      "stack_out": []
    },
    "1008": {
      "block": "main_simulateDeposit_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "1010": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "1011": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1012": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1014": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1015": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1018": {
      "op": "btoi",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1019": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateDeposit",
      "op": "callsub simulateDeposit",
      "defined_out": [
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0"
      ]
    },
    "1022": {
      "op": "dup",
      "defined_out": [
        "to_encode%15#0",
        "to_encode%15#0 (copy)"
      ],
      "stack_out": [
        "to_encode%15#0",
        "to_encode%15#0 (copy)"
      ]
    },
    "1023": {
      "op": "len",
      "defined_out": [
        "length%8#0",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "length%8#0"
      ]
    },
    "1024": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "as_bytes%8#0"
      ]
    },
    "1025": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%8#0",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "length_uint16%8#0"
      ]
    },
    "1028": {
      "op": "swap",
      "stack_out": [
        "length_uint16%8#0",
        "to_encode%15#0"
      ]
    },
    "1029": {
      "op": "concat",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "1030": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "0x151f7c75"
      ]
    },
    "1031": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ]
    },
    "1032": {
      "op": "concat",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1033": {
      "op": "log",
      "stack_out": []
    },
    "1034": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1035": {
      "op": "return",
      "stack_out": []
    },
    "1036": {
      "block": "main_realDeposit_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1038": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1039": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1040": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1042": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1043": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realDeposit",
      "op": "callsub realDeposit",
      "defined_out": [
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0"
      ]
    },
    "1046": {
      "op": "dup",
      "defined_out": [
        "to_encode%14#0",
        "to_encode%14#0 (copy)"
      ],
      "stack_out": [
        "to_encode%14#0",
        "to_encode%14#0 (copy)"
      ]
    },
    "1047": {
      "op": "len",
      "defined_out": [
        "length%7#0",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "length%7#0"
      ]
    },
    "1048": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "as_bytes%7#0"
      ]
    },
    "1049": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%7#0",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "length_uint16%7#0"
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "length_uint16%7#0",
        "to_encode%14#0"
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "1054": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "0x151f7c75"
      ]
    },
    "1055": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ]
    },
    "1056": {
      "op": "concat",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1057": {
      "op": "log",
      "stack_out": []
    },
    "1058": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1059": {
      "op": "return",
      "stack_out": []
    },
    "1060": {
      "block": "main_investInStartup_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1062": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1063": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1064": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1066": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1067": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1070": {
      "op": "btoi",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "1071": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1074": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1075": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1078": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1079": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.investInStartup",
      "op": "callsub investInStartup",
      "defined_out": [
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0"
      ]
    },
    "1082": {
      "op": "dup",
      "defined_out": [
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ],
      "stack_out": [
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ]
    },
    "1083": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "length%6#0"
      ]
    },
    "1084": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "as_bytes%6#0"
      ]
    },
    "1085": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "length_uint16%6#0"
      ]
    },
    "1088": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%13#0"
      ]
    },
    "1089": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "1090": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "1091": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "1092": {
      "op": "concat",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1093": {
      "op": "log",
      "stack_out": []
    },
    "1094": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1095": {
      "op": "return",
      "stack_out": []
    },
    "1096": {
      "block": "main_getLoanRequestCount_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1098": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1099": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1100": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1102": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1103": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getLoanRequestCount",
      "op": "callsub getLoanRequestCount",
      "defined_out": [
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0"
      ]
    },
    "1106": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "1107": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "1108": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "1109": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1110": {
      "op": "log",
      "stack_out": []
    },
    "1111": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1112": {
      "op": "return",
      "stack_out": []
    },
    "1113": {
      "block": "main_getTotalInvestmentsCount_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1115": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1116": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1119": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1120": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvestmentsCount",
      "op": "callsub getTotalInvestmentsCount",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "1123": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1124": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1125": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1126": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1127": {
      "op": "log",
      "stack_out": []
    },
    "1128": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1129": {
      "op": "return",
      "stack_out": []
    },
    "1130": {
      "block": "main_getTokenizedStartupsCount_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1132": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1137": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTokenizedStartupsCount",
      "op": "callsub getTokenizedStartupsCount",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "1140": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1141": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1142": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1143": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1144": {
      "op": "log",
      "stack_out": []
    },
    "1145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1146": {
      "op": "return",
      "stack_out": []
    },
    "1147": {
      "block": "main_getStartupCount_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1149": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1150": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1151": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1153": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1154": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getStartupCount",
      "op": "callsub getStartupCount",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "1157": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1158": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1159": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1160": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1161": {
      "op": "log",
      "stack_out": []
    },
    "1162": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "return",
      "stack_out": []
    },
    "1164": {
      "block": "main_getInvestorCount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1166": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1167": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1168": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1170": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1171": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getInvestorCount",
      "op": "callsub getInvestorCount",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "1174": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1175": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1176": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1177": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1178": {
      "op": "log",
      "stack_out": []
    },
    "1179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1180": {
      "op": "return",
      "stack_out": []
    },
    "1181": {
      "block": "main_requestLoan_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1183": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1188": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1191": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1192": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1195": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "1196": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1199": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0"
      ]
    },
    "1200": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.requestLoan",
      "op": "callsub requestLoan",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "1203": {
      "op": "dup",
      "defined_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ]
    },
    "1204": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length%5#0"
      ]
    },
    "1205": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "as_bytes%5#0"
      ]
    },
    "1206": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length_uint16%5#0"
      ]
    },
    "1209": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%7#0"
      ]
    },
    "1210": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "1211": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "1212": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "1213": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1214": {
      "op": "log",
      "stack_out": []
    },
    "1215": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1216": {
      "op": "return",
      "stack_out": []
    },
    "1217": {
      "block": "main_tokenizeStartup_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1219": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1220": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1221": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1223": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1224": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1227": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1230": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1233": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "1234": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1237": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "1238": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "1241": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%60#0"
      ]
    },
    "1244": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.tokenizeStartup",
      "op": "callsub tokenizeStartup",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1247": {
      "op": "dup",
      "defined_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "1248": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length%4#0"
      ]
    },
    "1249": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "as_bytes%4#0"
      ]
    },
    "1250": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length_uint16%4#0"
      ]
    },
    "1253": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%6#0"
      ]
    },
    "1254": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "1255": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "1256": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "1257": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1258": {
      "op": "log",
      "stack_out": []
    },
    "1259": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1260": {
      "op": "return",
      "stack_out": []
    },
    "1261": {
      "block": "main_registerStartup_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1263": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1264": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1265": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1267": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1268": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1271": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1274": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "1277": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "1280": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1283": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "1284": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerStartup",
      "op": "callsub registerStartup",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1287": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "1288": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%3#0"
      ]
    },
    "1289": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%3#0"
      ]
    },
    "1290": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%3#0"
      ]
    },
    "1293": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%5#0"
      ]
    },
    "1294": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "1295": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "1296": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "1297": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1298": {
      "op": "log",
      "stack_out": []
    },
    "1299": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1300": {
      "op": "return",
      "stack_out": []
    },
    "1301": {
      "block": "main_canGenerateApiKey_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1303": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1304": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1305": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1307": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1308": {
      "op": "bytec 12 // 0x151f7c750000000000000001",
      "defined_out": [
        "0x151f7c750000000000000001"
      ],
      "stack_out": [
        "0x151f7c750000000000000001"
      ]
    },
    "1310": {
      "op": "log",
      "stack_out": []
    },
    "1311": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1312": {
      "op": "return",
      "stack_out": []
    },
    "1313": {
      "block": "main_getApiKeyCount_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1315": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1316": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1317": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1319": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1320": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getApiKeyCount",
      "op": "callsub getApiKeyCount",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1323": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1324": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1325": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1326": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1327": {
      "op": "log",
      "stack_out": []
    },
    "1328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1329": {
      "op": "return",
      "stack_out": []
    },
    "1330": {
      "block": "main_registerApiKey_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1332": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1333": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1334": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1336": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1337": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1340": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1343": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1346": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "1349": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "1352": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "1355": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerApiKey",
      "op": "callsub registerApiKey",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1358": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "1359": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "1360": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "1361": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "1364": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "1365": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "1366": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "1367": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "1368": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1369": {
      "op": "log",
      "stack_out": []
    },
    "1370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1371": {
      "op": "return",
      "stack_out": []
    },
    "1372": {
      "block": "main_registerInvestor_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1374": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1375": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1376": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1378": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1379": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1382": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1385": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1388": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1389": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerInvestor",
      "op": "callsub registerInvestor",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1392": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1393": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "1394": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "1395": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "1398": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "1399": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1400": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "1401": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "1402": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1403": {
      "op": "log",
      "stack_out": []
    },
    "1404": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1405": {
      "op": "return",
      "stack_out": []
    },
    "1406": {
      "block": "main_hello_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1408": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1409": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1410": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1412": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1413": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1416": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1419": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.hello",
      "op": "callsub hello",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1422": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1423": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1424": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "1425": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "1428": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "1429": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1430": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1431": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "1432": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1433": {
      "op": "log",
      "stack_out": []
    },
    "1434": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1435": {
      "op": "return",
      "stack_out": []
    },
    "1436": {
      "block": "main_bare_routing@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1438": {
      "op": "bnz main_after_if_else@41",
      "stack_out": []
    },
    "1441": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1443": {
      "op": "!",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "1444": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1445": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1446": {
      "op": "return",
      "stack_out": []
    },
    "1447": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1450": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "1459": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ]
    },
    "1461": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1462": {
      "retsub": true,
      "op": "retsub"
    },
    "1463": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerInvestor",
      "params": {
        "investorType#0": "bytes",
        "riskLevel#0": "uint64"
      },
      "block": "registerInvestor",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1466": {
      "op": "frame_dig -1",
      "defined_out": [
        "riskLevel#0 (copy)"
      ],
      "stack_out": [
        "riskLevel#0 (copy)"
      ]
    },
    "1468": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "riskLevel#0 (copy)"
      ],
      "stack_out": [
        "riskLevel#0 (copy)",
        "1"
      ]
    },
    "1469": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1470": {
      "op": "bnz registerInvestor_if_body@2",
      "stack_out": []
    },
    "1473": {
      "op": "frame_dig -1",
      "stack_out": [
        "riskLevel#0 (copy)"
      ]
    },
    "1475": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "riskLevel#0 (copy)"
      ],
      "stack_out": [
        "riskLevel#0 (copy)",
        "10"
      ]
    },
    "1477": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1478": {
      "op": "bz registerInvestor_after_if_else@3",
      "stack_out": []
    },
    "1481": {
      "block": "registerInvestor_if_body@2",
      "stack_in": [],
      "op": "pushbytes \"Risk level must be between 1 and 10\"",
      "defined_out": [
        "\"Risk level must be between 1 and 10\""
      ],
      "stack_out": [
        "\"Risk level must be between 1 and 10\""
      ]
    },
    "1518": {
      "retsub": true,
      "op": "retsub"
    },
    "1519": {
      "block": "registerInvestor_after_if_else@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1520": {
      "op": "bytec 6 // \"totalInvestors\"",
      "defined_out": [
        "\"totalInvestors\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestors\""
      ]
    },
    "1522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1523": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1524": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1525": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1526": {
      "op": "bytec 6 // \"totalInvestors\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalInvestors\""
      ]
    },
    "1528": {
      "op": "swap",
      "stack_out": [
        "\"totalInvestors\"",
        "new_state_value%0#0"
      ]
    },
    "1529": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1530": {
      "op": "pushbytes \"Investor registered successfully\"",
      "defined_out": [
        "\"Investor registered successfully\""
      ],
      "stack_out": [
        "\"Investor registered successfully\""
      ]
    },
    "1564": {
      "retsub": true,
      "op": "retsub"
    },
    "1565": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerApiKey",
      "params": {
        "walletAddress#0": "bytes",
        "apiKeyHash#0": "bytes",
        "tier#0": "bytes"
      },
      "block": "registerApiKey",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1568": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1569": {
      "op": "bytec 8 // \"totalApiKeys\"",
      "defined_out": [
        "\"totalApiKeys\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalApiKeys\""
      ]
    },
    "1571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1573": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1574": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1575": {
      "op": "bytec 8 // \"totalApiKeys\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalApiKeys\""
      ]
    },
    "1577": {
      "op": "swap",
      "stack_out": [
        "\"totalApiKeys\"",
        "new_state_value%0#0"
      ]
    },
    "1578": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1579": {
      "op": "pushbytes \"API key registered for wallet: \"",
      "defined_out": [
        "\"API key registered for wallet: \""
      ],
      "stack_out": [
        "\"API key registered for wallet: \""
      ]
    },
    "1612": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"API key registered for wallet: \"",
        "walletAddress#0 (copy)"
      ],
      "stack_out": [
        "\"API key registered for wallet: \"",
        "walletAddress#0 (copy)"
      ]
    },
    "1614": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1615": {
      "op": "pushbytes \" tier: \"",
      "defined_out": [
        "\" tier: \"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" tier: \""
      ]
    },
    "1624": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1625": {
      "op": "frame_dig -1",
      "defined_out": [
        "tier#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tier#0 (copy)"
      ]
    },
    "1627": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1628": {
      "retsub": true,
      "op": "retsub"
    },
    "1629": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getApiKeyCount",
      "params": {},
      "block": "getApiKeyCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1630": {
      "op": "bytec 8 // \"totalApiKeys\"",
      "defined_out": [
        "\"totalApiKeys\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalApiKeys\""
      ]
    },
    "1632": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1633": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1634": {
      "retsub": true,
      "op": "retsub"
    },
    "1635": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerStartup",
      "params": {
        "startupName#0": "bytes",
        "industry#0": "bytes",
        "requestedAmount#0": "uint64"
      },
      "block": "registerStartup",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1638": {
      "op": "frame_dig -1",
      "defined_out": [
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)"
      ]
    },
    "1640": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)",
        "1000000"
      ]
    },
    "1641": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1642": {
      "op": "bz registerStartup_after_if_else@2",
      "stack_out": []
    },
    "1645": {
      "op": "pushbytes \"Minimum loan request is 1 ALGO\"",
      "defined_out": [
        "\"Minimum loan request is 1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum loan request is 1 ALGO\""
      ]
    },
    "1677": {
      "retsub": true,
      "op": "retsub"
    },
    "1678": {
      "block": "registerStartup_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)"
      ]
    },
    "1680": {
      "op": "intc 4 // 1000000000",
      "defined_out": [
        "1000000000",
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)",
        "1000000000"
      ]
    },
    "1682": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1683": {
      "op": "bz registerStartup_after_if_else@4",
      "stack_out": []
    },
    "1686": {
      "op": "pushbytes \"Maximum loan request is 1000 ALGO\"",
      "defined_out": [
        "\"Maximum loan request is 1000 ALGO\""
      ],
      "stack_out": [
        "\"Maximum loan request is 1000 ALGO\""
      ]
    },
    "1721": {
      "retsub": true,
      "op": "retsub"
    },
    "1722": {
      "block": "registerStartup_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1723": {
      "op": "bytec 7 // \"totalStartups\"",
      "defined_out": [
        "\"totalStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalStartups\""
      ]
    },
    "1725": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1726": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1727": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1728": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1729": {
      "op": "bytec 7 // \"totalStartups\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalStartups\""
      ]
    },
    "1731": {
      "op": "swap",
      "stack_out": [
        "\"totalStartups\"",
        "new_state_value%0#0"
      ]
    },
    "1732": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1733": {
      "op": "pushbytes \"Startup registered successfully: \"",
      "defined_out": [
        "\"Startup registered successfully: \""
      ],
      "stack_out": [
        "\"Startup registered successfully: \""
      ]
    },
    "1768": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"Startup registered successfully: \"",
        "startupName#0 (copy)"
      ],
      "stack_out": [
        "\"Startup registered successfully: \"",
        "startupName#0 (copy)"
      ]
    },
    "1770": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1771": {
      "op": "pushbytes \" in \"",
      "defined_out": [
        "\" in \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\" in \""
      ]
    },
    "1777": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1778": {
      "op": "frame_dig -2",
      "defined_out": [
        "industry#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "industry#0 (copy)"
      ]
    },
    "1780": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1781": {
      "retsub": true,
      "op": "retsub"
    },
    "1782": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.tokenizeStartup",
      "params": {
        "startupName#0": "bytes",
        "tokenPrice#0": "uint64",
        "totalSupply#0": "uint64",
        "industry#0": "bytes"
      },
      "block": "tokenizeStartup",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1785": {
      "op": "frame_dig -3",
      "defined_out": [
        "tokenPrice#0 (copy)"
      ],
      "stack_out": [
        "tokenPrice#0 (copy)"
      ]
    },
    "1787": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tokenPrice#0 (copy)"
      ],
      "stack_out": [
        "tokenPrice#0 (copy)",
        "0"
      ]
    },
    "1788": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1789": {
      "op": "bz tokenizeStartup_after_if_else@2",
      "stack_out": []
    },
    "1792": {
      "op": "pushbytes \"Token price must be greater than 0\"",
      "defined_out": [
        "\"Token price must be greater than 0\""
      ],
      "stack_out": [
        "\"Token price must be greater than 0\""
      ]
    },
    "1828": {
      "retsub": true,
      "op": "retsub"
    },
    "1829": {
      "block": "tokenizeStartup_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "totalSupply#0 (copy)"
      ]
    },
    "1831": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "totalSupply#0 (copy)",
        "0"
      ]
    },
    "1832": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1833": {
      "op": "bz tokenizeStartup_after_if_else@4",
      "stack_out": []
    },
    "1836": {
      "op": "pushbytes \"Total supply must be greater than 0\"",
      "defined_out": [
        "\"Total supply must be greater than 0\""
      ],
      "stack_out": [
        "\"Total supply must be greater than 0\""
      ]
    },
    "1873": {
      "retsub": true,
      "op": "retsub"
    },
    "1874": {
      "block": "tokenizeStartup_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1875": {
      "op": "bytec 9 // \"totalTokenizedStartups\"",
      "defined_out": [
        "\"totalTokenizedStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalTokenizedStartups\""
      ]
    },
    "1877": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1878": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1879": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1880": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1881": {
      "op": "bytec 9 // \"totalTokenizedStartups\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalTokenizedStartups\""
      ]
    },
    "1883": {
      "op": "swap",
      "stack_out": [
        "\"totalTokenizedStartups\"",
        "new_state_value%0#0"
      ]
    },
    "1884": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1885": {
      "op": "pushbytes \"Startup tokenized successfully: \"",
      "defined_out": [
        "\"Startup tokenized successfully: \""
      ],
      "stack_out": [
        "\"Startup tokenized successfully: \""
      ]
    },
    "1919": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"Startup tokenized successfully: \"",
        "startupName#0 (copy)"
      ],
      "stack_out": [
        "\"Startup tokenized successfully: \"",
        "startupName#0 (copy)"
      ]
    },
    "1921": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1922": {
      "retsub": true,
      "op": "retsub"
    },
    "1923": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.requestLoan",
      "params": {
        "amount#0": "uint64",
        "duration#0": "uint64",
        "interestRate#0": "uint64"
      },
      "block": "requestLoan",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1926": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1927": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "1929": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1930": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1931": {
      "op": "bnz requestLoan_after_if_else@2",
      "stack_out": []
    },
    "1934": {
      "op": "bytec 13 // \"Platform is currently inactive\"",
      "defined_out": [
        "\"Platform is currently inactive\""
      ],
      "stack_out": [
        "\"Platform is currently inactive\""
      ]
    },
    "1936": {
      "retsub": true,
      "op": "retsub"
    },
    "1937": {
      "block": "requestLoan_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1939": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "1000000"
      ]
    },
    "1940": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1941": {
      "op": "bz requestLoan_after_if_else@4",
      "stack_out": []
    },
    "1944": {
      "op": "pushbytes \"Minimum loan amount is 1 ALGO\"",
      "defined_out": [
        "\"Minimum loan amount is 1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum loan amount is 1 ALGO\""
      ]
    },
    "1975": {
      "retsub": true,
      "op": "retsub"
    },
    "1976": {
      "block": "requestLoan_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1978": {
      "op": "intc 4 // 1000000000",
      "defined_out": [
        "1000000000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "1000000000"
      ]
    },
    "1980": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1981": {
      "op": "bz requestLoan_after_if_else@6",
      "stack_out": []
    },
    "1984": {
      "op": "pushbytes \"Maximum loan amount is 1000 ALGO\"",
      "defined_out": [
        "\"Maximum loan amount is 1000 ALGO\""
      ],
      "stack_out": [
        "\"Maximum loan amount is 1000 ALGO\""
      ]
    },
    "2018": {
      "retsub": true,
      "op": "retsub"
    },
    "2019": {
      "block": "requestLoan_after_if_else@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)"
      ]
    },
    "2021": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)",
        "1"
      ]
    },
    "2022": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2023": {
      "op": "bnz requestLoan_if_body@8",
      "stack_out": []
    },
    "2026": {
      "op": "frame_dig -2",
      "stack_out": [
        "duration#0 (copy)"
      ]
    },
    "2028": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)",
        "60"
      ]
    },
    "2030": {
      "op": ">",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2031": {
      "op": "bz requestLoan_after_if_else@9",
      "stack_out": []
    },
    "2034": {
      "block": "requestLoan_if_body@8",
      "stack_in": [],
      "op": "pushbytes \"Loan duration must be between 1-60 months\"",
      "defined_out": [
        "\"Loan duration must be between 1-60 months\""
      ],
      "stack_out": [
        "\"Loan duration must be between 1-60 months\""
      ]
    },
    "2077": {
      "retsub": true,
      "op": "retsub"
    },
    "2078": {
      "block": "requestLoan_after_if_else@9",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "interestRate#0 (copy)"
      ],
      "stack_out": [
        "interestRate#0 (copy)"
      ]
    },
    "2080": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "interestRate#0 (copy)"
      ],
      "stack_out": [
        "interestRate#0 (copy)",
        "1"
      ]
    },
    "2081": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2082": {
      "op": "bnz requestLoan_if_body@11",
      "stack_out": []
    },
    "2085": {
      "op": "frame_dig -1",
      "stack_out": [
        "interestRate#0 (copy)"
      ]
    },
    "2087": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "interestRate#0 (copy)"
      ],
      "stack_out": [
        "interestRate#0 (copy)",
        "30"
      ]
    },
    "2089": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2090": {
      "op": "bz requestLoan_after_if_else@12",
      "stack_out": []
    },
    "2093": {
      "block": "requestLoan_if_body@11",
      "stack_in": [],
      "op": "pushbytes \"Interest rate must be between 1-30%\"",
      "defined_out": [
        "\"Interest rate must be between 1-30%\""
      ],
      "stack_out": [
        "\"Interest rate must be between 1-30%\""
      ]
    },
    "2130": {
      "retsub": true,
      "op": "retsub"
    },
    "2131": {
      "block": "requestLoan_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2132": {
      "op": "bytec 10 // \"totalLoanRequests\"",
      "defined_out": [
        "\"totalLoanRequests\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLoanRequests\""
      ]
    },
    "2134": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2135": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2137": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2138": {
      "op": "bytec 10 // \"totalLoanRequests\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalLoanRequests\""
      ]
    },
    "2140": {
      "op": "swap",
      "stack_out": [
        "\"totalLoanRequests\"",
        "new_state_value%0#0"
      ]
    },
    "2141": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2142": {
      "op": "pushbytes \"Loan request created successfully\"",
      "defined_out": [
        "\"Loan request created successfully\""
      ],
      "stack_out": [
        "\"Loan request created successfully\""
      ]
    },
    "2177": {
      "retsub": true,
      "op": "retsub"
    },
    "2178": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getInvestorCount",
      "params": {},
      "block": "getInvestorCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2179": {
      "op": "bytec 6 // \"totalInvestors\"",
      "defined_out": [
        "\"totalInvestors\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestors\""
      ]
    },
    "2181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2182": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2183": {
      "retsub": true,
      "op": "retsub"
    },
    "2184": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getStartupCount",
      "params": {},
      "block": "getStartupCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2185": {
      "op": "bytec 7 // \"totalStartups\"",
      "defined_out": [
        "\"totalStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalStartups\""
      ]
    },
    "2187": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2188": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2189": {
      "retsub": true,
      "op": "retsub"
    },
    "2190": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTokenizedStartupsCount",
      "params": {},
      "block": "getTokenizedStartupsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2191": {
      "op": "bytec 9 // \"totalTokenizedStartups\"",
      "defined_out": [
        "\"totalTokenizedStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalTokenizedStartups\""
      ]
    },
    "2193": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2194": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2195": {
      "retsub": true,
      "op": "retsub"
    },
    "2196": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvestmentsCount",
      "params": {},
      "block": "getTotalInvestmentsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2197": {
      "op": "bytec 11 // \"totalInvestments\"",
      "defined_out": [
        "\"totalInvestments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestments\""
      ]
    },
    "2199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2200": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2201": {
      "retsub": true,
      "op": "retsub"
    },
    "2202": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getLoanRequestCount",
      "params": {},
      "block": "getLoanRequestCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2203": {
      "op": "bytec 10 // \"totalLoanRequests\"",
      "defined_out": [
        "\"totalLoanRequests\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLoanRequests\""
      ]
    },
    "2205": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2206": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2207": {
      "retsub": true,
      "op": "retsub"
    },
    "2208": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.investInStartup",
      "params": {
        "startupId#0": "uint64",
        "investmentAmount#0": "uint64",
        "tokenAmount#0": "uint64"
      },
      "block": "investInStartup",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2211": {
      "op": "frame_dig -2",
      "defined_out": [
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)"
      ]
    },
    "2213": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)",
        "0"
      ]
    },
    "2214": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2215": {
      "op": "bz investInStartup_after_if_else@2",
      "stack_out": []
    },
    "2218": {
      "op": "bytec 14 // \"Investment amount must be greater than 0\"",
      "defined_out": [
        "\"Investment amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Investment amount must be greater than 0\""
      ]
    },
    "2220": {
      "retsub": true,
      "op": "retsub"
    },
    "2221": {
      "block": "investInStartup_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "tokenAmount#0 (copy)"
      ],
      "stack_out": [
        "tokenAmount#0 (copy)"
      ]
    },
    "2223": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tokenAmount#0 (copy)"
      ],
      "stack_out": [
        "tokenAmount#0 (copy)",
        "0"
      ]
    },
    "2224": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2225": {
      "op": "bz investInStartup_after_if_else@4",
      "stack_out": []
    },
    "2228": {
      "op": "pushbytes \"Token amount must be greater than 0\"",
      "defined_out": [
        "\"Token amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Token amount must be greater than 0\""
      ]
    },
    "2265": {
      "retsub": true,
      "op": "retsub"
    },
    "2266": {
      "block": "investInStartup_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "startupId#0 (copy)"
      ],
      "stack_out": [
        "startupId#0 (copy)"
      ]
    },
    "2268": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "startupId#0 (copy)"
      ],
      "stack_out": [
        "startupId#0 (copy)",
        "0"
      ]
    },
    "2269": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2270": {
      "op": "bz investInStartup_after_if_else@6",
      "stack_out": []
    },
    "2273": {
      "op": "pushbytes \"Invalid startup ID\"",
      "defined_out": [
        "\"Invalid startup ID\""
      ],
      "stack_out": [
        "\"Invalid startup ID\""
      ]
    },
    "2293": {
      "retsub": true,
      "op": "retsub"
    },
    "2294": {
      "block": "investInStartup_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2295": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "2297": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2298": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2299": {
      "op": "bnz investInStartup_after_if_else@8",
      "stack_out": []
    },
    "2302": {
      "op": "bytec 13 // \"Platform is currently inactive\"",
      "defined_out": [
        "\"Platform is currently inactive\""
      ],
      "stack_out": [
        "\"Platform is currently inactive\""
      ]
    },
    "2304": {
      "retsub": true,
      "op": "retsub"
    },
    "2305": {
      "block": "investInStartup_after_if_else@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2306": {
      "op": "bytec 11 // \"totalInvestments\"",
      "defined_out": [
        "\"totalInvestments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestments\""
      ]
    },
    "2308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2309": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2311": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2312": {
      "op": "bytec 11 // \"totalInvestments\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalInvestments\""
      ]
    },
    "2314": {
      "op": "swap",
      "stack_out": [
        "\"totalInvestments\"",
        "new_state_value%0#0"
      ]
    },
    "2315": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2316": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2317": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2319": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2320": {
      "op": "frame_dig -2",
      "defined_out": [
        "investmentAmount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "investmentAmount#0 (copy)"
      ]
    },
    "2322": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2323": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalFundsInvested\""
      ]
    },
    "2324": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%1#0"
      ]
    },
    "2325": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2327": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "2328": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2329": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2330": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%3#0",
        "investmentAmount#0 (copy)"
      ]
    },
    "2332": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "investmentAmount#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "investmentAmount#0 (copy)",
        "50"
      ]
    },
    "2333": {
      "op": "/",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ]
    },
    "2334": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "2335": {
      "op": "bytec_3 // \"platformFees\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"platformFees\""
      ]
    },
    "2336": {
      "op": "swap",
      "stack_out": [
        "\"platformFees\"",
        "new_state_value%2#0"
      ]
    },
    "2337": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2338": {
      "op": "pushbytes \"Investment successful in startup\"",
      "defined_out": [
        "\"Investment successful in startup\""
      ],
      "stack_out": [
        "\"Investment successful in startup\""
      ]
    },
    "2372": {
      "retsub": true,
      "op": "retsub"
    },
    "2373": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realDeposit",
      "params": {},
      "block": "realDeposit",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2374": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2375": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2376": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2377": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1000000"
      ]
    },
    "2378": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2379": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsDeposited\""
      ]
    },
    "2380": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsDeposited\"",
        "new_state_value%0#0"
      ]
    },
    "2381": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2382": {
      "op": "pushbytes \"Real deposit processed: 1 ALGO\"",
      "defined_out": [
        "\"Real deposit processed: 1 ALGO\""
      ],
      "stack_out": [
        "\"Real deposit processed: 1 ALGO\""
      ]
    },
    "2414": {
      "retsub": true,
      "op": "retsub"
    },
    "2415": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateDeposit",
      "params": {
        "amount#0": "uint64"
      },
      "block": "simulateDeposit",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2418": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2420": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2421": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2422": {
      "op": "bz simulateDeposit_after_if_else@2",
      "stack_out": []
    },
    "2425": {
      "op": "pushbytes \"Amount must be greater than 0\"",
      "defined_out": [
        "\"Amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Amount must be greater than 0\""
      ]
    },
    "2456": {
      "retsub": true,
      "op": "retsub"
    },
    "2457": {
      "block": "simulateDeposit_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2459": {
      "op": "intc 5 // 100000",
      "defined_out": [
        "100000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "100000"
      ]
    },
    "2461": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2462": {
      "op": "bz simulateDeposit_after_if_else@4",
      "stack_out": []
    },
    "2465": {
      "op": "pushbytes \"Minimum deposit is 0.1 ALGO\"",
      "defined_out": [
        "\"Minimum deposit is 0.1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum deposit is 0.1 ALGO\""
      ]
    },
    "2494": {
      "retsub": true,
      "op": "retsub"
    },
    "2495": {
      "block": "simulateDeposit_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2496": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2497": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2498": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2499": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "2501": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2502": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsDeposited\""
      ]
    },
    "2503": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsDeposited\"",
        "new_state_value%0#0"
      ]
    },
    "2504": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2505": {
      "op": "pushbytes \"Deposit simulated successfully\"",
      "defined_out": [
        "\"Deposit simulated successfully\""
      ],
      "stack_out": [
        "\"Deposit simulated successfully\""
      ]
    },
    "2537": {
      "retsub": true,
      "op": "retsub"
    },
    "2538": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realWithdraw",
      "params": {
        "amount#0": "uint64"
      },
      "block": "realWithdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2541": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2543": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2544": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2545": {
      "op": "bz realWithdraw_after_if_else@2",
      "stack_out": []
    },
    "2548": {
      "op": "pushbytes \"Withdrawal amount must be greater than 0\"",
      "defined_out": [
        "\"Withdrawal amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Withdrawal amount must be greater than 0\""
      ]
    },
    "2590": {
      "retsub": true,
      "op": "retsub"
    },
    "2591": {
      "block": "realWithdraw_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2592": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2593": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2594": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2595": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2596": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2597": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2598": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2599": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2600": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "2602": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2603": {
      "op": "bz realWithdraw_after_if_else@4",
      "stack_out": []
    },
    "2606": {
      "op": "pushbytes \"Insufficient contract funds for withdrawal\"",
      "defined_out": [
        "\"Insufficient contract funds for withdrawal\""
      ],
      "stack_out": [
        "\"Insufficient contract funds for withdrawal\""
      ]
    },
    "2650": {
      "retsub": true,
      "op": "retsub"
    },
    "2651": {
      "block": "realWithdraw_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2653": {
      "op": "intc 5 // 100000",
      "defined_out": [
        "100000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "100000"
      ]
    },
    "2655": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2656": {
      "op": "bz realWithdraw_after_if_else@6",
      "stack_out": []
    },
    "2659": {
      "op": "pushbytes \"Minimum withdrawal is 0.1 ALGO\"",
      "defined_out": [
        "\"Minimum withdrawal is 0.1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum withdrawal is 0.1 ALGO\""
      ]
    },
    "2691": {
      "retsub": true,
      "op": "retsub"
    },
    "2692": {
      "block": "realWithdraw_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2693": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2695": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2696": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2698": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2699": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsDeposited\""
      ]
    },
    "2700": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsDeposited\"",
        "new_state_value%0#0"
      ]
    },
    "2701": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2702": {
      "op": "pushbytes \"Real withdrawal processed successfully\"",
      "defined_out": [
        "\"Real withdrawal processed successfully\""
      ],
      "stack_out": [
        "\"Real withdrawal processed successfully\""
      ]
    },
    "2742": {
      "retsub": true,
      "op": "retsub"
    },
    "2743": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateInvestment",
      "params": {
        "amount#0": "uint64"
      },
      "block": "simulateInvestment",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2746": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2748": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2749": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2750": {
      "op": "bz simulateInvestment_after_if_else@2",
      "stack_out": []
    },
    "2753": {
      "op": "bytec 14 // \"Investment amount must be greater than 0\"",
      "defined_out": [
        "\"Investment amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Investment amount must be greater than 0\""
      ]
    },
    "2755": {
      "retsub": true,
      "op": "retsub"
    },
    "2756": {
      "block": "simulateInvestment_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2757": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2758": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2759": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2761": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2762": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2763": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2764": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2765": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "2767": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2768": {
      "op": "bz simulateInvestment_after_if_else@4",
      "stack_out": []
    },
    "2771": {
      "op": "pushbytes \"Insufficient available funds for investment\"",
      "defined_out": [
        "\"Insufficient available funds for investment\""
      ],
      "stack_out": [
        "\"Insufficient available funds for investment\""
      ]
    },
    "2816": {
      "retsub": true,
      "op": "retsub"
    },
    "2817": {
      "block": "simulateInvestment_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2818": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2819": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2820": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2821": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2823": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2824": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsInvested\""
      ]
    },
    "2825": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%0#0"
      ]
    },
    "2826": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2827": {
      "op": "pushbytes \"Investment allocated successfully\"",
      "defined_out": [
        "\"Investment allocated successfully\""
      ],
      "stack_out": [
        "\"Investment allocated successfully\""
      ]
    },
    "2862": {
      "retsub": true,
      "op": "retsub"
    },
    "2863": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getAvailableFunds",
      "params": {},
      "block": "getAvailableFunds",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2864": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2865": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2866": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2867": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2868": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2869": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2870": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2871": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2872": {
      "retsub": true,
      "op": "retsub"
    },
    "2873": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalDeposited",
      "params": {},
      "block": "getTotalDeposited",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2874": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2875": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2876": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2877": {
      "retsub": true,
      "op": "retsub"
    },
    "2878": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvested",
      "params": {},
      "block": "getTotalInvested",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2879": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2880": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2881": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2882": {
      "retsub": true,
      "op": "retsub"
    },
    "2883": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFees",
      "params": {},
      "block": "getPlatformFees",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2884": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "2885": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2886": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2887": {
      "retsub": true,
      "op": "retsub"
    },
    "2888": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformStats",
      "params": {},
      "block": "getPlatformStats",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2891": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2892": {
      "op": "bytec 6 // \"totalInvestors\"",
      "defined_out": [
        "\"totalInvestors\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestors\""
      ]
    },
    "2894": {
      "op": "app_global_get_ex",
      "defined_out": [
        "investors#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "investors#0",
        "maybe_exists%0#0"
      ]
    },
    "2895": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "investors#0"
      ]
    },
    "2896": {
      "op": "intc_0 // 0",
      "stack_out": [
        "investors#0",
        "0"
      ]
    },
    "2897": {
      "op": "bytec 7 // \"totalStartups\"",
      "defined_out": [
        "\"totalStartups\"",
        "0",
        "investors#0"
      ],
      "stack_out": [
        "investors#0",
        "0",
        "\"totalStartups\""
      ]
    },
    "2899": {
      "op": "app_global_get_ex",
      "defined_out": [
        "investors#0",
        "maybe_exists%1#0",
        "startups#0"
      ],
      "stack_out": [
        "investors#0",
        "startups#0",
        "maybe_exists%1#0"
      ]
    },
    "2900": {
      "op": "swap",
      "stack_out": [
        "investors#0",
        "maybe_exists%1#0",
        "startups#0"
      ]
    },
    "2901": {
      "op": "cover 2",
      "defined_out": [
        "investors#0",
        "maybe_exists%1#0",
        "startups#0"
      ],
      "stack_out": [
        "startups#0",
        "investors#0",
        "maybe_exists%1#0"
      ]
    },
    "2903": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "startups#0",
        "investors#0"
      ]
    },
    "2904": {
      "op": "bnz getPlatformStats_after_if_else@3",
      "stack_out": [
        "startups#0"
      ]
    },
    "2907": {
      "op": "frame_dig 0",
      "stack_out": [
        "startups#0",
        "startups#0"
      ]
    },
    "2909": {
      "op": "bnz getPlatformStats_after_if_else@3",
      "stack_out": [
        "startups#0"
      ]
    },
    "2912": {
      "op": "pushbytes \"AlgoCredit Platform: Ready for users\"",
      "defined_out": [
        "\"AlgoCredit Platform: Ready for users\"",
        "startups#0"
      ],
      "stack_out": [
        "startups#0",
        "\"AlgoCredit Platform: Ready for users\""
      ]
    },
    "2950": {
      "op": "swap"
    },
    "2951": {
      "retsub": true,
      "op": "retsub"
    },
    "2952": {
      "block": "getPlatformStats_after_if_else@3",
      "stack_in": [
        "startups#0"
      ],
      "op": "pushbytes \"AlgoCredit Platform: Active\"",
      "defined_out": [
        "\"AlgoCredit Platform: Active\""
      ],
      "stack_out": [
        "startups#0",
        "\"AlgoCredit Platform: Active\""
      ]
    },
    "2981": {
      "op": "swap"
    },
    "2982": {
      "retsub": true,
      "op": "retsub"
    },
    "2983": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realLoanFunding",
      "params": {
        "loanId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "realLoanFunding",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2986": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2989": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2990": {
      "op": "bz realLoanFunding_after_if_else@2",
      "stack_out": []
    },
    "2993": {
      "op": "bytec 15 // \"Funding amount must be greater than 0\"",
      "defined_out": [
        "\"Funding amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Funding amount must be greater than 0\""
      ]
    },
    "2995": {
      "retsub": true,
      "op": "retsub"
    },
    "2996": {
      "block": "realLoanFunding_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "2998": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)",
        "0"
      ]
    },
    "2999": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3000": {
      "op": "bz realLoanFunding_after_if_else@4",
      "stack_out": []
    },
    "3003": {
      "op": "bytec 16 // \"Invalid loan ID\"",
      "defined_out": [
        "\"Invalid loan ID\""
      ],
      "stack_out": [
        "\"Invalid loan ID\""
      ]
    },
    "3005": {
      "retsub": true,
      "op": "retsub"
    },
    "3006": {
      "block": "realLoanFunding_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3007": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "3008": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3009": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3010": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "3011": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "3012": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3013": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "3014": {
      "op": "-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3015": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "3017": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3018": {
      "op": "bz realLoanFunding_after_if_else@6",
      "stack_out": []
    },
    "3021": {
      "op": "bytec 17 // \"Insufficient available funds\"",
      "defined_out": [
        "\"Insufficient available funds\""
      ],
      "stack_out": [
        "\"Insufficient available funds\""
      ]
    },
    "3023": {
      "retsub": true,
      "op": "retsub"
    },
    "3024": {
      "block": "realLoanFunding_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3025": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "3026": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3027": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3028": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "3030": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3031": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsInvested\""
      ]
    },
    "3032": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%0#0"
      ]
    },
    "3033": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3034": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3035": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "defined_out": [
        "\"totalActiveLoans\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalActiveLoans\""
      ]
    },
    "3037": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3038": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "3039": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "3040": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3041": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalActiveLoans\""
      ]
    },
    "3043": {
      "op": "swap",
      "stack_out": [
        "\"totalActiveLoans\"",
        "new_state_value%1#0"
      ]
    },
    "3044": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3045": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3046": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "3047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3048": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "3049": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3051": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)",
        "50"
      ]
    },
    "3052": {
      "op": "/",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ]
    },
    "3053": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "3054": {
      "op": "bytec_3 // \"platformFees\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"platformFees\""
      ]
    },
    "3055": {
      "op": "swap",
      "stack_out": [
        "\"platformFees\"",
        "new_state_value%2#0"
      ]
    },
    "3056": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3057": {
      "op": "pushbytes \"Real loan funding processed successfully\"",
      "defined_out": [
        "\"Real loan funding processed successfully\""
      ],
      "stack_out": [
        "\"Real loan funding processed successfully\""
      ]
    },
    "3099": {
      "retsub": true,
      "op": "retsub"
    },
    "3100": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateLoanFunding",
      "params": {
        "loanId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "simulateLoanFunding",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3103": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "3105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "3106": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3107": {
      "op": "bz simulateLoanFunding_after_if_else@2",
      "stack_out": []
    },
    "3110": {
      "op": "bytec 15 // \"Funding amount must be greater than 0\"",
      "defined_out": [
        "\"Funding amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Funding amount must be greater than 0\""
      ]
    },
    "3112": {
      "retsub": true,
      "op": "retsub"
    },
    "3113": {
      "block": "simulateLoanFunding_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "3115": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)",
        "0"
      ]
    },
    "3116": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3117": {
      "op": "bz simulateLoanFunding_after_if_else@4",
      "stack_out": []
    },
    "3120": {
      "op": "bytec 16 // \"Invalid loan ID\"",
      "defined_out": [
        "\"Invalid loan ID\""
      ],
      "stack_out": [
        "\"Invalid loan ID\""
      ]
    },
    "3122": {
      "retsub": true,
      "op": "retsub"
    },
    "3123": {
      "block": "simulateLoanFunding_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3124": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "3125": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3126": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "3128": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "3129": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3130": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "3131": {
      "op": "-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3132": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "3134": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3135": {
      "op": "bz simulateLoanFunding_after_if_else@6",
      "stack_out": []
    },
    "3138": {
      "op": "bytec 17 // \"Insufficient available funds\"",
      "defined_out": [
        "\"Insufficient available funds\""
      ],
      "stack_out": [
        "\"Insufficient available funds\""
      ]
    },
    "3140": {
      "retsub": true,
      "op": "retsub"
    },
    "3141": {
      "block": "simulateLoanFunding_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3142": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "3143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3144": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3145": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "3147": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3148": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsInvested\""
      ]
    },
    "3149": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%0#0"
      ]
    },
    "3150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3151": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3152": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "defined_out": [
        "\"totalActiveLoans\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalActiveLoans\""
      ]
    },
    "3154": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3155": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "3156": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "3157": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3158": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalActiveLoans\""
      ]
    },
    "3160": {
      "op": "swap",
      "stack_out": [
        "\"totalActiveLoans\"",
        "new_state_value%1#0"
      ]
    },
    "3161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3162": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3163": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "3164": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3165": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "3166": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3168": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)",
        "50"
      ]
    },
    "3169": {
      "op": "/",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ]
    },
    "3170": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "3171": {
      "op": "bytec_3 // \"platformFees\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"platformFees\""
      ]
    },
    "3172": {
      "op": "swap",
      "stack_out": [
        "\"platformFees\"",
        "new_state_value%2#0"
      ]
    },
    "3173": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3174": {
      "op": "pushbytes \"Loan funding simulated successfully\"",
      "defined_out": [
        "\"Loan funding simulated successfully\""
      ],
      "stack_out": [
        "\"Loan funding simulated successfully\""
      ]
    },
    "3211": {
      "retsub": true,
      "op": "retsub"
    },
    "3212": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getActiveLoansCount",
      "params": {},
      "block": "getActiveLoansCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3213": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "defined_out": [
        "\"totalActiveLoans\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalActiveLoans\""
      ]
    },
    "3215": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3216": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3217": {
      "retsub": true,
      "op": "retsub"
    },
    "3218": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.togglePlatformStatus",
      "params": {},
      "block": "togglePlatformStatus",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3219": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "3221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3222": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "3224": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3225": {
      "op": "bz togglePlatformStatus_else_body@2",
      "stack_out": []
    },
    "3228": {
      "op": "bytec 4 // \"contractActive\"",
      "stack_out": [
        "\"contractActive\""
      ]
    },
    "3230": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contractActive\"",
        "0"
      ]
    },
    "3231": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3232": {
      "op": "pushbytes \"Platform deactivated\"",
      "defined_out": [
        "\"Platform deactivated\""
      ],
      "stack_out": [
        "\"Platform deactivated\""
      ]
    },
    "3254": {
      "retsub": true,
      "op": "retsub"
    },
    "3255": {
      "block": "togglePlatformStatus_else_body@2",
      "stack_in": [],
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\""
      ],
      "stack_out": [
        "\"contractActive\""
      ]
    },
    "3257": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"contractActive\"",
        "1"
      ],
      "stack_out": [
        "\"contractActive\"",
        "1"
      ]
    },
    "3258": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3259": {
      "op": "pushbytes \"Platform activated\"",
      "defined_out": [
        "\"Platform activated\""
      ],
      "stack_out": [
        "\"Platform activated\""
      ]
    },
    "3279": {
      "retsub": true,
      "op": "retsub"
    },
    "3280": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.collectPlatformFees",
      "params": {},
      "block": "collectPlatformFees",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3281": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "3282": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fees#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "fees#0",
        "maybe_exists%0#0"
      ]
    },
    "3283": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fees#0"
      ]
    },
    "3284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fees#0",
        "0"
      ]
    },
    "3285": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3286": {
      "op": "bz collectPlatformFees_after_if_else@2",
      "stack_out": []
    },
    "3289": {
      "op": "pushbytes \"No fees available for collection\"",
      "defined_out": [
        "\"No fees available for collection\""
      ],
      "stack_out": [
        "\"No fees available for collection\""
      ]
    },
    "3323": {
      "retsub": true,
      "op": "retsub"
    },
    "3324": {
      "block": "collectPlatformFees_after_if_else@2",
      "stack_in": [],
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\""
      ],
      "stack_out": [
        "\"platformFees\""
      ]
    },
    "3325": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "\"platformFees\"",
        "0"
      ]
    },
    "3326": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3327": {
      "op": "pushbytes \"Platform fees collected successfully\"",
      "defined_out": [
        "\"Platform fees collected successfully\""
      ],
      "stack_out": [
        "\"Platform fees collected successfully\""
      ]
    },
    "3365": {
      "retsub": true,
      "op": "retsub"
    },
    "3366": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFeesAmount",
      "params": {},
      "block": "getPlatformFeesAmount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3367": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "3368": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3369": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3370": {
      "retsub": true,
      "op": "retsub"
    },
    "3371": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.testPlatform",
      "params": {},
      "block": "testPlatform",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3372": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "3374": {
      "op": "app_global_get_ex",
      "defined_out": [
        "active#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "active#0",
        "maybe_exists%0#0"
      ]
    },
    "3375": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "active#0"
      ]
    },
    "3376": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "active#0"
      ],
      "stack_out": [
        "active#0",
        "1"
      ]
    },
    "3377": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3378": {
      "op": "bz testPlatform_else_body@2",
      "stack_out": []
    },
    "3381": {
      "op": "pushbytes \"AlgoCredit Platform test successful - ACTIVE\"",
      "defined_out": [
        "\"AlgoCredit Platform test successful - ACTIVE\""
      ],
      "stack_out": [
        "\"AlgoCredit Platform test successful - ACTIVE\""
      ]
    },
    "3427": {
      "retsub": true,
      "op": "retsub"
    },
    "3428": {
      "block": "testPlatform_else_body@2",
      "stack_in": [],
      "op": "pushbytes \"AlgoCredit Platform test successful - INACTIVE\"",
      "defined_out": [
        "\"AlgoCredit Platform test successful - INACTIVE\""
      ],
      "stack_out": [
        "\"AlgoCredit Platform test successful - INACTIVE\""
      ]
    },
    "3476": {
      "retsub": true,
      "op": "retsub"
    }
  }
}