{
  "version": 3,
  "sources": [
    "/Users/ahmetbugrakurnaz/Desktop/algorand/algo-contract/projects/algo-contract/smart_contracts/algo_smartcontract/contract.algo.ts"
  ],
  "mappingsgbE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA7VF;;;AAAA;AAAA;;;AAAA;AA6VE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA9TF;;;AAAA;AAAA;;;AAAA;AA8TE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAzPF;;;AAAA;AAyPE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA7NF;;;AAAA;AA6NE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAzMF;;;AAAA;AAyME;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAxJF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAwJE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AA9EF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA8EE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AA3DF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AA2DE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAvCF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAuCE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAxBF;;;AAAA;;;AAAA;;;AAAA;AAwBE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAhBF;;;AAAA;;;AAgBE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAgBE;;;AACS;;;;;;;;;AAAA;;AAAA;AAAP;AAOF;;;AAEM;;AAAY;AAAZ;AAAA;;;AAAiB;;AAAY;;AAAZ;AAAjB;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAzBJ;AAAA;;AAAA;AAAA;AA6B0D;AAA5B;AA7B9B;;AA6BE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAkB;AAAlB;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAkB;;AAAlB;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA5CJ;AAAA;;AAAA;AAAA;AAgDwD;AAA3B;AAhD7B;;AAgDE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAoD;;;;;;AAApD;AAAA;;AAAA;AAAP;AAMF;;;AAEM;;AAAc;AAAd;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGE;;AAAe;AAAf;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA9DJ;AAAA;;AAAA;AAAA;AAkE0E;AAApC;AAlEtC;;AAkEE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAMF;;;AAnEA;AAAA;;AAAA;AAAA;AAqEE;;;AACS;;AAAP;AAIE;;AAAS;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGE;;AAAS;;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAW;AAAX;AAAA;;;AAAgB;;AAAW;;AAAX;AAAhB;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAe;AAAf;AAAA;;;AAAoB;;AAAe;;AAAf;AAApB;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA7FJ;AAAA;;AAAA;AAAA;AAiGgE;AAA/B;AAjGjC;;AAiGE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAxGF;AAAA;;AAAA;AAAA;AAgHE;AA/GF;AAAA;;AAAA;AAAA;AAuHE;AAtHF;AAAA;;AAAA;AAAA;AA8HE;AAzHF;AAAA;;AAAA;AAAA;AAiIE;AAnIF;AAAA;;AAAA;AAAA;AA2IE;AAMF;;;AAEM;;AAAoB;AAApB;AAAJ;;;AACS;;AAAP;AAGE;;AAAe;AAAf;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGE;;AAAa;AAAb;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;AAAP;AAxJJ;AAAA;;AAAA;AAAA;AA4JE;;;AACS;;AAAP;AA/JJ;AAAA;;AAAA;AAAA;AAmK8D;AAA9B;AAnKhC;;AAmKE;AAAA;AAtKF;AAAA;AAAA;AAAA;AAuKkC;;AAAA;AAvKlC;AAuKE;AAAA;AAnKF;AAAA;AAAA;AAAA;AAsKuD;;AAAmB;AAAnB;AAA3B;AAtK5B;AAsKE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA7KF;AAAA;AAAA;AAAA;AA4LoE;AAAjC;AA5LnC;AA4LE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAS;;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA5MJ;AAAA;AAAA;AAAA;AAgNmC;;AAAA;AAhNnC;AAgNE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA3NJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA8Ne;AAAT;;AAAA;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIE;;AAAS;;AAAT;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AArOJ;AAAA;AAAA;AAAA;AAyOmC;;AAAA;AAzOnC;AAyOE;AAAA;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AAvPJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA0Pe;AAAT;;AAAA;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA3PJ;AAAA;AAAA;AAAA;AA+PkC;;AAAA;AA/PlC;AA+PE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAlQF;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAwQS;AAAP;AAzQF;AAAA;AAAA;AAAA;AAgRE;AA/QF;AAAA;AAAA;AAAA;AAsRE;AAlRF;AAAA;AAAA;AAAA;AAyRE;AAMF;;;AAvSA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA0SM;;;AAAA;;AAAA;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAGK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAaF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AAGE;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AAhUJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAmUe;AAAT;;AAAA;AAAJ;;;AACS;;AAAP;AApUJ;AAAA;AAAA;AAAA;AAwUkC;;AAAA;AAxUlC;AAwUE;AAAA;AAtUF;AAAA;;AAAA;AAAA;AAuU8D;AAA9B;AAvUhC;;AAuUE;AAAA;AArUF;AAAA;AAAA;AAAA;AAwUuD;;AAAS;AAAT;AAA3B;AAxU5B;AAwUE;AAAA;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAMF;;;AAEM;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AAGE;;AAAU;AAAV;AAAJ;;;AACS;;AAAP;AA/VJ;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAkWe;AAAT;;AAAA;AAAJ;;;AACS;;AAAP;AAnWJ;AAAA;AAAA;AAAA;AAuWkC;;AAAA;AAvWlC;AAuWE;AAAA;AArWF;AAAA;;AAAA;AAAA;AAsW8D;AAA9B;AAtWhC;;AAsWE;AAAA;AApWF;AAAA;AAAA;AAAA;AAuWuD;;AAAS;AAAT;AAA3B;AAvW5B;AAuWE;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AA3WF;AAAA;;AAAA;AAAA;AA2XE;AAxXF;AAAA;;AAAA;AAAA;AA+XoC;AAA9B;AAAJ;;;AA/XF;;AAgYgC;AAA5B;AACO;;;;;;;;;;;;;;;;;;;;;;AAAP;AAjYJ;;AAmYgC;AAA5B;AACO;;;;;;;;;;;;;;;;;;;;AAAP;AArYJ;AAAA;AAAA;AAAA;AA+Yc;AAAR;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAhZJ;AAoZ4B;AAA1B;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAzZF;AAAA;AAAA;AAAA;AAgaE;AA/ZF;AAAA;;AAAA;AAAA;AAuaiB;AAAX;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000000 50 1000000000 100000"
    },
    "17": {
      "op": "bytecblock 0x151f7c75 \"totalFundsInvested\" \"totalFundsDeposited\" \"platformFees\" \"contractActive\" \"totalActiveLoans\" \"totalInvestors\" \"totalStartups\" \"totalTokenizedStartups\" \"totalLoanRequests\" \"totalInvestments\" \"Platform is currently inactive\" \"Investment amount must be greater than 0\" \"Funding amount must be greater than 0\" \"Invalid loan ID\" \"Insufficient available funds\""
    },
    "350": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "352": {
      "op": "bz main_bare_routing@34",
      "stack_out": []
    },
    "355": {
      "op": "pushbytess 0x02bece11 0xf43287ab 0x7eac1ca1 0x1f523c74 0xff8437eb 0xf59c7cec 0x7fa0dca0 0xa14ba69d 0x64e2bb78 0xa57c633e 0x9ad40acb 0x9824c702 0x1b294dcc 0x790f3af8 0x45e19fa9 0xcb45a8b7 0x587aa573 0xe476d182 0xee57c82c 0x11237b48 0xbe5e72a0 0xd7a79c2f 0xc5dcad3f 0x8a1dac4b 0x5c8ee5d2 0xee7a7d04 0xf65cc277 0x09c3d5fd 0x8052215e // method \"hello(string)string\", method \"registerInvestor(string,uint64)string\", method \"registerStartup(string,string,uint64)string\", method \"tokenizeStartup(string,uint64,uint64,string)string\", method \"requestLoan(uint64,uint64,uint64)string\", method \"getInvestorCount()uint64\", method \"getStartupCount()uint64\", method \"getTokenizedStartupsCount()uint64\", method \"getTotalInvestmentsCount()uint64\", method \"getLoanRequestCount()uint64\", method \"investInStartup(uint64,uint64,uint64)string\", method \"realDeposit()string\", method \"simulateDeposit(uint64)string\", method \"realWithdraw(uint64)string\", method \"simulateInvestment(uint64)string\", method \"getAvailableFunds()uint64\", method \"getTotalDeposited()uint64\", method \"getTotalInvested()uint64\", method \"getPlatformFees()uint64\", method \"getPlatformStats()string\", method \"getContractInfo()string\", method \"realLoanFunding(uint64,uint64)string\", method \"simulateLoanFunding(uint64,uint64)string\", method \"isContractActive()uint64\", method \"getActiveLoansCount()uint64\", method \"togglePlatformStatus()string\", method \"collectPlatformFees()string\", method \"getPlatformFeesAmount()uint64\", method \"testPlatform()string\"",
      "defined_out": [
        "Method(collectPlatformFees()string)",
        "Method(getActiveLoansCount()uint64)",
        "Method(getAvailableFunds()uint64)",
        "Method(getContractInfo()string)",
        "Method(getInvestorCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(hello(string)string)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(realDeposit()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(testPlatform()string)",
        "Method(togglePlatformStatus()string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(getInvestorCount()uint64)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(realDeposit()string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(getAvailableFunds()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getContractInfo()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(getActiveLoansCount()uint64)",
        "Method(togglePlatformStatus()string)",
        "Method(collectPlatformFees()string)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(testPlatform()string)"
      ]
    },
    "502": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(collectPlatformFees()string)",
        "Method(getActiveLoansCount()uint64)",
        "Method(getAvailableFunds()uint64)",
        "Method(getContractInfo()string)",
        "Method(getInvestorCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(hello(string)string)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(realDeposit()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(testPlatform()string)",
        "Method(togglePlatformStatus()string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(registerInvestor(string,uint64)string)",
        "Method(registerStartup(string,string,uint64)string)",
        "Method(tokenizeStartup(string,uint64,uint64,string)string)",
        "Method(requestLoan(uint64,uint64,uint64)string)",
        "Method(getInvestorCount()uint64)",
        "Method(getStartupCount()uint64)",
        "Method(getTokenizedStartupsCount()uint64)",
        "Method(getTotalInvestmentsCount()uint64)",
        "Method(getLoanRequestCount()uint64)",
        "Method(investInStartup(uint64,uint64,uint64)string)",
        "Method(realDeposit()string)",
        "Method(simulateDeposit(uint64)string)",
        "Method(realWithdraw(uint64)string)",
        "Method(simulateInvestment(uint64)string)",
        "Method(getAvailableFunds()uint64)",
        "Method(getTotalDeposited()uint64)",
        "Method(getTotalInvested()uint64)",
        "Method(getPlatformFees()uint64)",
        "Method(getPlatformStats()string)",
        "Method(getContractInfo()string)",
        "Method(realLoanFunding(uint64,uint64)string)",
        "Method(simulateLoanFunding(uint64,uint64)string)",
        "Method(isContractActive()uint64)",
        "Method(getActiveLoansCount()uint64)",
        "Method(togglePlatformStatus()string)",
        "Method(collectPlatformFees()string)",
        "Method(getPlatformFeesAmount()uint64)",
        "Method(testPlatform()string)",
        "tmp%2#0"
      ]
    },
    "505": {
      "op": "match main_hello_route@3 main_registerInvestor_route@4 main_registerStartup_route@5 main_tokenizeStartup_route@6 main_requestLoan_route@7 main_getInvestorCount_route@8 main_getStartupCount_route@9 main_getTokenizedStartupsCount_route@10 main_getTotalInvestmentsCount_route@11 main_getLoanRequestCount_route@12 main_investInStartup_route@13 main_realDeposit_route@14 main_simulateDeposit_route@15 main_realWithdraw_route@16 main_simulateInvestment_route@17 main_getAvailableFunds_route@18 main_getTotalDeposited_route@19 main_getTotalInvested_route@20 main_getPlatformFees_route@21 main_getPlatformStats_route@22 main_getContractInfo_route@23 main_realLoanFunding_route@24 main_simulateLoanFunding_route@25 main_isContractActive_route@26 main_getActiveLoansCount_route@27 main_togglePlatformStatus_route@28 main_collectPlatformFees_route@29 main_getPlatformFeesAmount_route@30 main_testPlatform_route@31",
      "stack_out": []
    },
    "565": {
      "block": "main_after_if_else@38",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "op": "return",
      "stack_out": []
    },
    "567": {
      "block": "main_testPlatform_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "569": {
      "op": "!",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "570": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "571": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "573": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "574": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.testPlatform",
      "op": "callsub testPlatform",
      "defined_out": [
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0"
      ]
    },
    "577": {
      "op": "dup",
      "defined_out": [
        "to_encode%28#0",
        "to_encode%28#0 (copy)"
      ],
      "stack_out": [
        "to_encode%28#0",
        "to_encode%28#0 (copy)"
      ]
    },
    "578": {
      "op": "len",
      "defined_out": [
        "length%16#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "length%16#0"
      ]
    },
    "579": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "as_bytes%16#0"
      ]
    },
    "580": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%16#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "length_uint16%16#0"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "length_uint16%16#0",
        "to_encode%28#0"
      ]
    },
    "584": {
      "op": "concat",
      "defined_out": [
        "encoded_value%16#0"
      ],
      "stack_out": [
        "encoded_value%16#0"
      ]
    },
    "585": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%16#0"
      ],
      "stack_out": [
        "encoded_value%16#0",
        "0x151f7c75"
      ]
    },
    "586": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%16#0"
      ]
    },
    "587": {
      "op": "concat",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "588": {
      "op": "log",
      "stack_out": []
    },
    "589": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "590": {
      "op": "return",
      "stack_out": []
    },
    "591": {
      "block": "main_getPlatformFeesAmount_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "593": {
      "op": "!",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "594": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "595": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "597": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "598": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFeesAmount",
      "op": "callsub getPlatformFeesAmount",
      "defined_out": [
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0"
      ]
    },
    "601": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "602": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "603": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "604": {
      "op": "concat",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "605": {
      "op": "log",
      "stack_out": []
    },
    "606": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "607": {
      "op": "return",
      "stack_out": []
    },
    "608": {
      "block": "main_collectPlatformFees_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "610": {
      "op": "!",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "611": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "612": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "614": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "615": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.collectPlatformFees",
      "op": "callsub collectPlatformFees",
      "defined_out": [
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0"
      ]
    },
    "618": {
      "op": "dup",
      "defined_out": [
        "to_encode%26#0",
        "to_encode%26#0 (copy)"
      ],
      "stack_out": [
        "to_encode%26#0",
        "to_encode%26#0 (copy)"
      ]
    },
    "619": {
      "op": "len",
      "defined_out": [
        "length%15#0",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "length%15#0"
      ]
    },
    "620": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "as_bytes%15#0"
      ]
    },
    "621": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%15#0",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "length_uint16%15#0"
      ]
    },
    "624": {
      "op": "swap",
      "stack_out": [
        "length_uint16%15#0",
        "to_encode%26#0"
      ]
    },
    "625": {
      "op": "concat",
      "defined_out": [
        "encoded_value%15#0"
      ],
      "stack_out": [
        "encoded_value%15#0"
      ]
    },
    "626": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%15#0"
      ],
      "stack_out": [
        "encoded_value%15#0",
        "0x151f7c75"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%15#0"
      ]
    },
    "628": {
      "op": "concat",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "629": {
      "op": "log",
      "stack_out": []
    },
    "630": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "631": {
      "op": "return",
      "stack_out": []
    },
    "632": {
      "block": "main_togglePlatformStatus_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "634": {
      "op": "!",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "635": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "636": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "638": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "639": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.togglePlatformStatus",
      "op": "callsub togglePlatformStatus",
      "defined_out": [
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0"
      ]
    },
    "642": {
      "op": "dup",
      "defined_out": [
        "to_encode%25#0",
        "to_encode%25#0 (copy)"
      ],
      "stack_out": [
        "to_encode%25#0",
        "to_encode%25#0 (copy)"
      ]
    },
    "643": {
      "op": "len",
      "defined_out": [
        "length%14#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "length%14#0"
      ]
    },
    "644": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "as_bytes%14#0"
      ]
    },
    "645": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%14#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "length_uint16%14#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "length_uint16%14#0",
        "to_encode%25#0"
      ]
    },
    "649": {
      "op": "concat",
      "defined_out": [
        "encoded_value%14#0"
      ],
      "stack_out": [
        "encoded_value%14#0"
      ]
    },
    "650": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%14#0"
      ],
      "stack_out": [
        "encoded_value%14#0",
        "0x151f7c75"
      ]
    },
    "651": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%14#0"
      ]
    },
    "652": {
      "op": "concat",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "653": {
      "op": "log",
      "stack_out": []
    },
    "654": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "655": {
      "op": "return",
      "stack_out": []
    },
    "656": {
      "block": "main_getActiveLoansCount_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "658": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "659": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "660": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "662": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "663": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getActiveLoansCount",
      "op": "callsub getActiveLoansCount",
      "defined_out": [
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0"
      ]
    },
    "666": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0"
      ]
    },
    "667": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ]
    },
    "669": {
      "op": "concat",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "670": {
      "op": "log",
      "stack_out": []
    },
    "671": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "672": {
      "op": "return",
      "stack_out": []
    },
    "673": {
      "block": "main_isContractActive_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "675": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "676": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "677": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "679": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "680": {
      "op": "pushbytes 0x151f7c750000000000000001",
      "defined_out": [
        "0x151f7c750000000000000001"
      ],
      "stack_out": [
        "0x151f7c750000000000000001"
      ]
    },
    "694": {
      "op": "log",
      "stack_out": []
    },
    "695": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "696": {
      "op": "return",
      "stack_out": []
    },
    "697": {
      "block": "main_simulateLoanFunding_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "699": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "700": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "701": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "703": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "704": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "707": {
      "op": "btoi",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "708": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "711": {
      "op": "btoi",
      "defined_out": [
        "tmp%144#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "tmp%145#0"
      ]
    },
    "712": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateLoanFunding",
      "op": "callsub simulateLoanFunding",
      "defined_out": [
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0"
      ]
    },
    "715": {
      "op": "dup",
      "defined_out": [
        "to_encode%22#0",
        "to_encode%22#0 (copy)"
      ],
      "stack_out": [
        "to_encode%22#0",
        "to_encode%22#0 (copy)"
      ]
    },
    "716": {
      "op": "len",
      "defined_out": [
        "length%13#0",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "length%13#0"
      ]
    },
    "717": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "as_bytes%13#0"
      ]
    },
    "718": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%13#0",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "length_uint16%13#0"
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "length_uint16%13#0",
        "to_encode%22#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "encoded_value%13#0"
      ],
      "stack_out": [
        "encoded_value%13#0"
      ]
    },
    "723": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%13#0"
      ],
      "stack_out": [
        "encoded_value%13#0",
        "0x151f7c75"
      ]
    },
    "724": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%13#0"
      ]
    },
    "725": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "726": {
      "op": "log",
      "stack_out": []
    },
    "727": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "728": {
      "op": "return",
      "stack_out": []
    },
    "729": {
      "block": "main_realLoanFunding_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "731": {
      "op": "!",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "732": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "733": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "735": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "736": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "739": {
      "op": "btoi",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "740": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "743": {
      "op": "btoi",
      "defined_out": [
        "tmp%137#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "tmp%138#0"
      ]
    },
    "744": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realLoanFunding",
      "op": "callsub realLoanFunding",
      "defined_out": [
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0"
      ]
    },
    "747": {
      "op": "dup",
      "defined_out": [
        "to_encode%21#0",
        "to_encode%21#0 (copy)"
      ],
      "stack_out": [
        "to_encode%21#0",
        "to_encode%21#0 (copy)"
      ]
    },
    "748": {
      "op": "len",
      "defined_out": [
        "length%12#0",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "length%12#0"
      ]
    },
    "749": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "as_bytes%12#0"
      ]
    },
    "750": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%12#0",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "length_uint16%12#0"
      ]
    },
    "753": {
      "op": "swap",
      "stack_out": [
        "length_uint16%12#0",
        "to_encode%21#0"
      ]
    },
    "754": {
      "op": "concat",
      "defined_out": [
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0"
      ]
    },
    "755": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0",
        "0x151f7c75"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%12#0"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "758": {
      "op": "log",
      "stack_out": []
    },
    "759": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "return",
      "stack_out": []
    },
    "761": {
      "block": "main_getContractInfo_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "763": {
      "op": "!",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "767": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "768": {
      "op": "pushbytes 0x151f7c75002e416c676f43726564697420506c6174666f726d2076332e30202d205265616c205061796d656e7473205265616479",
      "defined_out": [
        "0x151f7c75002e416c676f43726564697420506c6174666f726d2076332e30202d205265616c205061796d656e7473205265616479"
      ],
      "stack_out": [
        "0x151f7c75002e416c676f43726564697420506c6174666f726d2076332e30202d205265616c205061796d656e7473205265616479"
      ]
    },
    "822": {
      "op": "log",
      "stack_out": []
    },
    "823": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "824": {
      "op": "return",
      "stack_out": []
    },
    "825": {
      "block": "main_getPlatformStats_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "827": {
      "op": "!",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "828": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "829": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "831": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "832": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformStats",
      "op": "callsub getPlatformStats",
      "defined_out": [
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0"
      ]
    },
    "835": {
      "op": "dup",
      "defined_out": [
        "to_encode%19#0",
        "to_encode%19#0 (copy)"
      ],
      "stack_out": [
        "to_encode%19#0",
        "to_encode%19#0 (copy)"
      ]
    },
    "836": {
      "op": "len",
      "defined_out": [
        "length%10#0",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "length%10#0"
      ]
    },
    "837": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "as_bytes%10#0"
      ]
    },
    "838": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%10#0",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "length_uint16%10#0"
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "length_uint16%10#0",
        "to_encode%19#0"
      ]
    },
    "842": {
      "op": "concat",
      "defined_out": [
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0"
      ]
    },
    "843": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "0x151f7c75"
      ]
    },
    "844": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ]
    },
    "845": {
      "op": "concat",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "846": {
      "op": "log",
      "stack_out": []
    },
    "847": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "848": {
      "op": "return",
      "stack_out": []
    },
    "849": {
      "block": "main_getPlatformFees_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "851": {
      "op": "!",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "852": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "853": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "855": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "856": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFees",
      "op": "callsub getPlatformFees",
      "defined_out": [
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0"
      ]
    },
    "859": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0"
      ]
    },
    "860": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "0x151f7c75"
      ]
    },
    "861": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ]
    },
    "862": {
      "op": "concat",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "863": {
      "op": "log",
      "stack_out": []
    },
    "864": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "865": {
      "op": "return",
      "stack_out": []
    },
    "866": {
      "block": "main_getTotalInvested_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "868": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "869": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "870": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "872": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "873": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvested",
      "op": "callsub getTotalInvested",
      "defined_out": [
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0"
      ]
    },
    "876": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0"
      ]
    },
    "877": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ]
    },
    "879": {
      "op": "concat",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "880": {
      "op": "log",
      "stack_out": []
    },
    "881": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "882": {
      "op": "return",
      "stack_out": []
    },
    "883": {
      "block": "main_getTotalDeposited_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "885": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "886": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "887": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "889": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "890": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalDeposited",
      "op": "callsub getTotalDeposited",
      "defined_out": [
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0"
      ]
    },
    "893": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "894": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "895": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "896": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "897": {
      "op": "log",
      "stack_out": []
    },
    "898": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "899": {
      "op": "return",
      "stack_out": []
    },
    "900": {
      "block": "main_getAvailableFunds_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "902": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "903": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "904": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "906": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "907": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getAvailableFunds",
      "op": "callsub getAvailableFunds",
      "defined_out": [
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0"
      ]
    },
    "910": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "911": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "912": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "913": {
      "op": "concat",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "914": {
      "op": "log",
      "stack_out": []
    },
    "915": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "916": {
      "op": "return",
      "stack_out": []
    },
    "917": {
      "block": "main_simulateInvestment_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "919": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "920": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "921": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "923": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "924": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "927": {
      "op": "btoi",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "928": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateInvestment",
      "op": "callsub simulateInvestment",
      "defined_out": [
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0"
      ]
    },
    "931": {
      "op": "dup",
      "defined_out": [
        "to_encode%14#0",
        "to_encode%14#0 (copy)"
      ],
      "stack_out": [
        "to_encode%14#0",
        "to_encode%14#0 (copy)"
      ]
    },
    "932": {
      "op": "len",
      "defined_out": [
        "length%9#0",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "length%9#0"
      ]
    },
    "933": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "as_bytes%9#0"
      ]
    },
    "934": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%9#0",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "length_uint16%9#0"
      ]
    },
    "937": {
      "op": "swap",
      "stack_out": [
        "length_uint16%9#0",
        "to_encode%14#0"
      ]
    },
    "938": {
      "op": "concat",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "939": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "0x151f7c75"
      ]
    },
    "940": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ]
    },
    "941": {
      "op": "concat",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "942": {
      "op": "log",
      "stack_out": []
    },
    "943": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "944": {
      "op": "return",
      "stack_out": []
    },
    "945": {
      "block": "main_realWithdraw_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "947": {
      "op": "!",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "948": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "949": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "951": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "952": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "955": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "956": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realWithdraw",
      "op": "callsub realWithdraw",
      "defined_out": [
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0"
      ]
    },
    "959": {
      "op": "dup",
      "defined_out": [
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ],
      "stack_out": [
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ]
    },
    "960": {
      "op": "len",
      "defined_out": [
        "length%8#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "length%8#0"
      ]
    },
    "961": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "as_bytes%8#0"
      ]
    },
    "962": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%8#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "length_uint16%8#0"
      ]
    },
    "965": {
      "op": "swap",
      "stack_out": [
        "length_uint16%8#0",
        "to_encode%13#0"
      ]
    },
    "966": {
      "op": "concat",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "967": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "0x151f7c75"
      ]
    },
    "968": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ]
    },
    "969": {
      "op": "concat",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "970": {
      "op": "log",
      "stack_out": []
    },
    "971": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "972": {
      "op": "return",
      "stack_out": []
    },
    "973": {
      "block": "main_simulateDeposit_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "975": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "976": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "977": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "979": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "980": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "983": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "984": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateDeposit",
      "op": "callsub simulateDeposit",
      "defined_out": [
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0"
      ]
    },
    "987": {
      "op": "dup",
      "defined_out": [
        "to_encode%12#0",
        "to_encode%12#0 (copy)"
      ],
      "stack_out": [
        "to_encode%12#0",
        "to_encode%12#0 (copy)"
      ]
    },
    "988": {
      "op": "len",
      "defined_out": [
        "length%7#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "length%7#0"
      ]
    },
    "989": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "as_bytes%7#0"
      ]
    },
    "990": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%7#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "length_uint16%7#0"
      ]
    },
    "993": {
      "op": "swap",
      "stack_out": [
        "length_uint16%7#0",
        "to_encode%12#0"
      ]
    },
    "994": {
      "op": "concat",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "995": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "0x151f7c75"
      ]
    },
    "996": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ]
    },
    "997": {
      "op": "concat",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "998": {
      "op": "log",
      "stack_out": []
    },
    "999": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1000": {
      "op": "return",
      "stack_out": []
    },
    "1001": {
      "block": "main_realDeposit_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1003": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1004": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1005": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1007": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1008": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realDeposit",
      "op": "callsub realDeposit",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "1011": {
      "op": "dup",
      "defined_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ]
    },
    "1012": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length%6#0"
      ]
    },
    "1013": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "as_bytes%6#0"
      ]
    },
    "1014": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length_uint16%6#0"
      ]
    },
    "1017": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%11#0"
      ]
    },
    "1018": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "1019": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "1020": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1022": {
      "op": "log",
      "stack_out": []
    },
    "1023": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1024": {
      "op": "return",
      "stack_out": []
    },
    "1025": {
      "block": "main_investInStartup_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1027": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1028": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1029": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1031": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1032": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1035": {
      "op": "btoi",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1036": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1039": {
      "op": "btoi",
      "defined_out": [
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "tmp%77#0"
      ]
    },
    "1040": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "tmp%77#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1043": {
      "op": "btoi",
      "defined_out": [
        "tmp%76#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "1044": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.investInStartup",
      "op": "callsub investInStartup",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "1047": {
      "op": "dup",
      "defined_out": [
        "to_encode%10#0",
        "to_encode%10#0 (copy)"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%10#0 (copy)"
      ]
    },
    "1048": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "length%5#0"
      ]
    },
    "1049": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "as_bytes%5#0"
      ]
    },
    "1050": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "length_uint16%5#0"
      ]
    },
    "1053": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%10#0"
      ]
    },
    "1054": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "1055": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "1056": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "1057": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1058": {
      "op": "log",
      "stack_out": []
    },
    "1059": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1060": {
      "op": "return",
      "stack_out": []
    },
    "1061": {
      "block": "main_getLoanRequestCount_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1063": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1064": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1065": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1067": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1068": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getLoanRequestCount",
      "op": "callsub getLoanRequestCount",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "1071": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1072": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1073": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1074": {
      "op": "concat",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1075": {
      "op": "log",
      "stack_out": []
    },
    "1076": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1077": {
      "op": "return",
      "stack_out": []
    },
    "1078": {
      "block": "main_getTotalInvestmentsCount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1080": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1081": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1082": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1084": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1085": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvestmentsCount",
      "op": "callsub getTotalInvestmentsCount",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "1088": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1089": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1090": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1091": {
      "op": "concat",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1092": {
      "op": "log",
      "stack_out": []
    },
    "1093": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1094": {
      "op": "return",
      "stack_out": []
    },
    "1095": {
      "block": "main_getTokenizedStartupsCount_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1097": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1098": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1099": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1102": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTokenizedStartupsCount",
      "op": "callsub getTokenizedStartupsCount",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "1105": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1106": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1107": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1108": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1109": {
      "op": "log",
      "stack_out": []
    },
    "1110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1111": {
      "op": "return",
      "stack_out": []
    },
    "1112": {
      "block": "main_getStartupCount_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1114": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1115": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1116": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1119": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getStartupCount",
      "op": "callsub getStartupCount",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1122": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1123": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1124": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1125": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1126": {
      "op": "log",
      "stack_out": []
    },
    "1127": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1128": {
      "op": "return",
      "stack_out": []
    },
    "1129": {
      "block": "main_getInvestorCount_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1131": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1132": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1133": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1135": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1136": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getInvestorCount",
      "op": "callsub getInvestorCount",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1139": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1140": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1141": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1142": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1143": {
      "op": "log",
      "stack_out": []
    },
    "1144": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1145": {
      "op": "return",
      "stack_out": []
    },
    "1146": {
      "block": "main_requestLoan_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1148": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1153": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1156": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1157": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1160": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "1161": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1164": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "1165": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.requestLoan",
      "op": "callsub requestLoan",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1168": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "1169": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length%4#0"
      ]
    },
    "1170": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "as_bytes%4#0"
      ]
    },
    "1171": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length_uint16%4#0"
      ]
    },
    "1174": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%4#0"
      ]
    },
    "1175": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "1176": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "1177": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "1178": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1179": {
      "op": "log",
      "stack_out": []
    },
    "1180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1181": {
      "op": "return",
      "stack_out": []
    },
    "1182": {
      "block": "main_tokenizeStartup_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1184": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1185": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1186": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1188": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1189": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1192": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1195": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1198": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1199": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1202": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1203": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1206": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0"
      ]
    },
    "1209": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.tokenizeStartup",
      "op": "callsub tokenizeStartup",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1212": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "1213": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "1214": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "1215": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "1218": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "1219": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "1220": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "1221": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "1222": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1223": {
      "op": "log",
      "stack_out": []
    },
    "1224": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1225": {
      "op": "return",
      "stack_out": []
    },
    "1226": {
      "block": "main_registerStartup_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1228": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1233": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1236": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1239": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1242": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "1245": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1248": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "1249": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerStartup",
      "op": "callsub registerStartup",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1252": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "1253": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "1254": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "1255": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "1258": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "1259": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "1260": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "1261": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "1262": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1263": {
      "op": "log",
      "stack_out": []
    },
    "1264": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1265": {
      "op": "return",
      "stack_out": []
    },
    "1266": {
      "block": "main_registerInvestor_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1268": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1269": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1270": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1272": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1273": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1276": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1279": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1282": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1283": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerInvestor",
      "op": "callsub registerInvestor",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1286": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1287": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "1288": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "1289": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "1292": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "1293": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1294": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "1295": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "1296": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1297": {
      "op": "log",
      "stack_out": []
    },
    "1298": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1299": {
      "op": "return",
      "stack_out": []
    },
    "1300": {
      "block": "main_hello_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1302": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1303": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1304": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1306": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1307": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1310": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1313": {
      "callsub": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.hello",
      "op": "callsub hello",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1316": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1317": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1318": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "1319": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "1322": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "1323": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1324": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1325": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "1326": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1327": {
      "op": "log",
      "stack_out": []
    },
    "1328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1329": {
      "op": "return",
      "stack_out": []
    },
    "1330": {
      "block": "main_bare_routing@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1332": {
      "op": "bnz main_after_if_else@38",
      "stack_out": []
    },
    "1335": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1337": {
      "op": "!",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1338": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1340": {
      "op": "return",
      "stack_out": []
    },
    "1341": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1344": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "1353": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ]
    },
    "1355": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1356": {
      "retsub": true,
      "op": "retsub"
    },
    "1357": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerInvestor",
      "params": {
        "investorType#0": "bytes",
        "riskLevel#0": "uint64"
      },
      "block": "registerInvestor",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1360": {
      "op": "frame_dig -1",
      "defined_out": [
        "riskLevel#0 (copy)"
      ],
      "stack_out": [
        "riskLevel#0 (copy)"
      ]
    },
    "1362": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "riskLevel#0 (copy)"
      ],
      "stack_out": [
        "riskLevel#0 (copy)",
        "1"
      ]
    },
    "1363": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1364": {
      "op": "bnz registerInvestor_if_body@2",
      "stack_out": []
    },
    "1367": {
      "op": "frame_dig -1",
      "stack_out": [
        "riskLevel#0 (copy)"
      ]
    },
    "1369": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "riskLevel#0 (copy)"
      ],
      "stack_out": [
        "riskLevel#0 (copy)",
        "10"
      ]
    },
    "1371": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1372": {
      "op": "bz registerInvestor_after_if_else@3",
      "stack_out": []
    },
    "1375": {
      "block": "registerInvestor_if_body@2",
      "stack_in": [],
      "op": "pushbytes \"Risk level must be between 1 and 10\"",
      "defined_out": [
        "\"Risk level must be between 1 and 10\""
      ],
      "stack_out": [
        "\"Risk level must be between 1 and 10\""
      ]
    },
    "1412": {
      "retsub": true,
      "op": "retsub"
    },
    "1413": {
      "block": "registerInvestor_after_if_else@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1414": {
      "op": "bytec 6 // \"totalInvestors\"",
      "defined_out": [
        "\"totalInvestors\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestors\""
      ]
    },
    "1416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1417": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1419": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1420": {
      "op": "bytec 6 // \"totalInvestors\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalInvestors\""
      ]
    },
    "1422": {
      "op": "swap",
      "stack_out": [
        "\"totalInvestors\"",
        "new_state_value%0#0"
      ]
    },
    "1423": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1424": {
      "op": "pushbytes \"Investor registered successfully\"",
      "defined_out": [
        "\"Investor registered successfully\""
      ],
      "stack_out": [
        "\"Investor registered successfully\""
      ]
    },
    "1458": {
      "retsub": true,
      "op": "retsub"
    },
    "1459": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.registerStartup",
      "params": {
        "startupName#0": "bytes",
        "industry#0": "bytes",
        "requestedAmount#0": "uint64"
      },
      "block": "registerStartup",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1462": {
      "op": "frame_dig -1",
      "defined_out": [
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)"
      ]
    },
    "1464": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)",
        "1000000"
      ]
    },
    "1465": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1466": {
      "op": "bz registerStartup_after_if_else@2",
      "stack_out": []
    },
    "1469": {
      "op": "pushbytes \"Minimum loan request is 1 ALGO\"",
      "defined_out": [
        "\"Minimum loan request is 1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum loan request is 1 ALGO\""
      ]
    },
    "1501": {
      "retsub": true,
      "op": "retsub"
    },
    "1502": {
      "block": "registerStartup_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)"
      ]
    },
    "1504": {
      "op": "intc 4 // 1000000000",
      "defined_out": [
        "1000000000",
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "requestedAmount#0 (copy)",
        "1000000000"
      ]
    },
    "1506": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1507": {
      "op": "bz registerStartup_after_if_else@4",
      "stack_out": []
    },
    "1510": {
      "op": "pushbytes \"Maximum loan request is 1000 ALGO\"",
      "defined_out": [
        "\"Maximum loan request is 1000 ALGO\""
      ],
      "stack_out": [
        "\"Maximum loan request is 1000 ALGO\""
      ]
    },
    "1545": {
      "retsub": true,
      "op": "retsub"
    },
    "1546": {
      "block": "registerStartup_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1547": {
      "op": "bytec 7 // \"totalStartups\"",
      "defined_out": [
        "\"totalStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalStartups\""
      ]
    },
    "1549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1551": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1552": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1553": {
      "op": "bytec 7 // \"totalStartups\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalStartups\""
      ]
    },
    "1555": {
      "op": "swap",
      "stack_out": [
        "\"totalStartups\"",
        "new_state_value%0#0"
      ]
    },
    "1556": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1557": {
      "op": "pushbytes \"Startup registered successfully: \"",
      "defined_out": [
        "\"Startup registered successfully: \""
      ],
      "stack_out": [
        "\"Startup registered successfully: \""
      ]
    },
    "1592": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"Startup registered successfully: \"",
        "startupName#0 (copy)"
      ],
      "stack_out": [
        "\"Startup registered successfully: \"",
        "startupName#0 (copy)"
      ]
    },
    "1594": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1595": {
      "op": "pushbytes \" in \"",
      "defined_out": [
        "\" in \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\" in \""
      ]
    },
    "1601": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1602": {
      "op": "frame_dig -2",
      "defined_out": [
        "industry#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "industry#0 (copy)"
      ]
    },
    "1604": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1605": {
      "retsub": true,
      "op": "retsub"
    },
    "1606": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.tokenizeStartup",
      "params": {
        "startupName#0": "bytes",
        "tokenPrice#0": "uint64",
        "totalSupply#0": "uint64",
        "industry#0": "bytes"
      },
      "block": "tokenizeStartup",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1609": {
      "op": "frame_dig -3",
      "defined_out": [
        "tokenPrice#0 (copy)"
      ],
      "stack_out": [
        "tokenPrice#0 (copy)"
      ]
    },
    "1611": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tokenPrice#0 (copy)"
      ],
      "stack_out": [
        "tokenPrice#0 (copy)",
        "0"
      ]
    },
    "1612": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1613": {
      "op": "bz tokenizeStartup_after_if_else@2",
      "stack_out": []
    },
    "1616": {
      "op": "pushbytes \"Token price must be greater than 0\"",
      "defined_out": [
        "\"Token price must be greater than 0\""
      ],
      "stack_out": [
        "\"Token price must be greater than 0\""
      ]
    },
    "1652": {
      "retsub": true,
      "op": "retsub"
    },
    "1653": {
      "block": "tokenizeStartup_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "totalSupply#0 (copy)"
      ]
    },
    "1655": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "totalSupply#0 (copy)",
        "0"
      ]
    },
    "1656": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1657": {
      "op": "bz tokenizeStartup_after_if_else@4",
      "stack_out": []
    },
    "1660": {
      "op": "pushbytes \"Total supply must be greater than 0\"",
      "defined_out": [
        "\"Total supply must be greater than 0\""
      ],
      "stack_out": [
        "\"Total supply must be greater than 0\""
      ]
    },
    "1697": {
      "retsub": true,
      "op": "retsub"
    },
    "1698": {
      "block": "tokenizeStartup_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1699": {
      "op": "bytec 8 // \"totalTokenizedStartups\"",
      "defined_out": [
        "\"totalTokenizedStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalTokenizedStartups\""
      ]
    },
    "1701": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1702": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1703": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1704": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1705": {
      "op": "bytec 8 // \"totalTokenizedStartups\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalTokenizedStartups\""
      ]
    },
    "1707": {
      "op": "swap",
      "stack_out": [
        "\"totalTokenizedStartups\"",
        "new_state_value%0#0"
      ]
    },
    "1708": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1709": {
      "op": "pushbytes \"Startup tokenized successfully: \"",
      "defined_out": [
        "\"Startup tokenized successfully: \""
      ],
      "stack_out": [
        "\"Startup tokenized successfully: \""
      ]
    },
    "1743": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"Startup tokenized successfully: \"",
        "startupName#0 (copy)"
      ],
      "stack_out": [
        "\"Startup tokenized successfully: \"",
        "startupName#0 (copy)"
      ]
    },
    "1745": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1746": {
      "retsub": true,
      "op": "retsub"
    },
    "1747": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.requestLoan",
      "params": {
        "amount#0": "uint64",
        "duration#0": "uint64",
        "interestRate#0": "uint64"
      },
      "block": "requestLoan",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1750": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1751": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "1753": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1754": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1755": {
      "op": "bnz requestLoan_after_if_else@2",
      "stack_out": []
    },
    "1758": {
      "op": "bytec 11 // \"Platform is currently inactive\"",
      "defined_out": [
        "\"Platform is currently inactive\""
      ],
      "stack_out": [
        "\"Platform is currently inactive\""
      ]
    },
    "1760": {
      "retsub": true,
      "op": "retsub"
    },
    "1761": {
      "block": "requestLoan_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1763": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "1000000"
      ]
    },
    "1764": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1765": {
      "op": "bz requestLoan_after_if_else@4",
      "stack_out": []
    },
    "1768": {
      "op": "pushbytes \"Minimum loan amount is 1 ALGO\"",
      "defined_out": [
        "\"Minimum loan amount is 1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum loan amount is 1 ALGO\""
      ]
    },
    "1799": {
      "retsub": true,
      "op": "retsub"
    },
    "1800": {
      "block": "requestLoan_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1802": {
      "op": "intc 4 // 1000000000",
      "defined_out": [
        "1000000000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "1000000000"
      ]
    },
    "1804": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1805": {
      "op": "bz requestLoan_after_if_else@6",
      "stack_out": []
    },
    "1808": {
      "op": "pushbytes \"Maximum loan amount is 1000 ALGO\"",
      "defined_out": [
        "\"Maximum loan amount is 1000 ALGO\""
      ],
      "stack_out": [
        "\"Maximum loan amount is 1000 ALGO\""
      ]
    },
    "1842": {
      "retsub": true,
      "op": "retsub"
    },
    "1843": {
      "block": "requestLoan_after_if_else@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)"
      ]
    },
    "1845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)",
        "1"
      ]
    },
    "1846": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1847": {
      "op": "bnz requestLoan_if_body@8",
      "stack_out": []
    },
    "1850": {
      "op": "frame_dig -2",
      "stack_out": [
        "duration#0 (copy)"
      ]
    },
    "1852": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)",
        "60"
      ]
    },
    "1854": {
      "op": ">",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1855": {
      "op": "bz requestLoan_after_if_else@9",
      "stack_out": []
    },
    "1858": {
      "block": "requestLoan_if_body@8",
      "stack_in": [],
      "op": "pushbytes \"Loan duration must be between 1-60 months\"",
      "defined_out": [
        "\"Loan duration must be between 1-60 months\""
      ],
      "stack_out": [
        "\"Loan duration must be between 1-60 months\""
      ]
    },
    "1901": {
      "retsub": true,
      "op": "retsub"
    },
    "1902": {
      "block": "requestLoan_after_if_else@9",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "interestRate#0 (copy)"
      ],
      "stack_out": [
        "interestRate#0 (copy)"
      ]
    },
    "1904": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "interestRate#0 (copy)"
      ],
      "stack_out": [
        "interestRate#0 (copy)",
        "1"
      ]
    },
    "1905": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1906": {
      "op": "bnz requestLoan_if_body@11",
      "stack_out": []
    },
    "1909": {
      "op": "frame_dig -1",
      "stack_out": [
        "interestRate#0 (copy)"
      ]
    },
    "1911": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "interestRate#0 (copy)"
      ],
      "stack_out": [
        "interestRate#0 (copy)",
        "30"
      ]
    },
    "1913": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1914": {
      "op": "bz requestLoan_after_if_else@12",
      "stack_out": []
    },
    "1917": {
      "block": "requestLoan_if_body@11",
      "stack_in": [],
      "op": "pushbytes \"Interest rate must be between 1-30%\"",
      "defined_out": [
        "\"Interest rate must be between 1-30%\""
      ],
      "stack_out": [
        "\"Interest rate must be between 1-30%\""
      ]
    },
    "1954": {
      "retsub": true,
      "op": "retsub"
    },
    "1955": {
      "block": "requestLoan_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1956": {
      "op": "bytec 9 // \"totalLoanRequests\"",
      "defined_out": [
        "\"totalLoanRequests\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLoanRequests\""
      ]
    },
    "1958": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1959": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1960": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1961": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1962": {
      "op": "bytec 9 // \"totalLoanRequests\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalLoanRequests\""
      ]
    },
    "1964": {
      "op": "swap",
      "stack_out": [
        "\"totalLoanRequests\"",
        "new_state_value%0#0"
      ]
    },
    "1965": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1966": {
      "op": "pushbytes \"Loan request created successfully\"",
      "defined_out": [
        "\"Loan request created successfully\""
      ],
      "stack_out": [
        "\"Loan request created successfully\""
      ]
    },
    "2001": {
      "retsub": true,
      "op": "retsub"
    },
    "2002": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getInvestorCount",
      "params": {},
      "block": "getInvestorCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2003": {
      "op": "bytec 6 // \"totalInvestors\"",
      "defined_out": [
        "\"totalInvestors\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestors\""
      ]
    },
    "2005": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2006": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2007": {
      "retsub": true,
      "op": "retsub"
    },
    "2008": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getStartupCount",
      "params": {},
      "block": "getStartupCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2009": {
      "op": "bytec 7 // \"totalStartups\"",
      "defined_out": [
        "\"totalStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalStartups\""
      ]
    },
    "2011": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2012": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2013": {
      "retsub": true,
      "op": "retsub"
    },
    "2014": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTokenizedStartupsCount",
      "params": {},
      "block": "getTokenizedStartupsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2015": {
      "op": "bytec 8 // \"totalTokenizedStartups\"",
      "defined_out": [
        "\"totalTokenizedStartups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalTokenizedStartups\""
      ]
    },
    "2017": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2018": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2019": {
      "retsub": true,
      "op": "retsub"
    },
    "2020": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvestmentsCount",
      "params": {},
      "block": "getTotalInvestmentsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2021": {
      "op": "bytec 10 // \"totalInvestments\"",
      "defined_out": [
        "\"totalInvestments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestments\""
      ]
    },
    "2023": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2024": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2025": {
      "retsub": true,
      "op": "retsub"
    },
    "2026": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getLoanRequestCount",
      "params": {},
      "block": "getLoanRequestCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2027": {
      "op": "bytec 9 // \"totalLoanRequests\"",
      "defined_out": [
        "\"totalLoanRequests\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLoanRequests\""
      ]
    },
    "2029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2030": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2031": {
      "retsub": true,
      "op": "retsub"
    },
    "2032": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.investInStartup",
      "params": {
        "startupId#0": "uint64",
        "investmentAmount#0": "uint64",
        "tokenAmount#0": "uint64"
      },
      "block": "investInStartup",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2035": {
      "op": "frame_dig -2",
      "defined_out": [
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)"
      ]
    },
    "2037": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)",
        "0"
      ]
    },
    "2038": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2039": {
      "op": "bz investInStartup_after_if_else@2",
      "stack_out": []
    },
    "2042": {
      "op": "bytec 12 // \"Investment amount must be greater than 0\"",
      "defined_out": [
        "\"Investment amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Investment amount must be greater than 0\""
      ]
    },
    "2044": {
      "retsub": true,
      "op": "retsub"
    },
    "2045": {
      "block": "investInStartup_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "tokenAmount#0 (copy)"
      ],
      "stack_out": [
        "tokenAmount#0 (copy)"
      ]
    },
    "2047": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tokenAmount#0 (copy)"
      ],
      "stack_out": [
        "tokenAmount#0 (copy)",
        "0"
      ]
    },
    "2048": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2049": {
      "op": "bz investInStartup_after_if_else@4",
      "stack_out": []
    },
    "2052": {
      "op": "pushbytes \"Token amount must be greater than 0\"",
      "defined_out": [
        "\"Token amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Token amount must be greater than 0\""
      ]
    },
    "2089": {
      "retsub": true,
      "op": "retsub"
    },
    "2090": {
      "block": "investInStartup_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "startupId#0 (copy)"
      ],
      "stack_out": [
        "startupId#0 (copy)"
      ]
    },
    "2092": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "startupId#0 (copy)"
      ],
      "stack_out": [
        "startupId#0 (copy)",
        "0"
      ]
    },
    "2093": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2094": {
      "op": "bz investInStartup_after_if_else@6",
      "stack_out": []
    },
    "2097": {
      "op": "pushbytes \"Invalid startup ID\"",
      "defined_out": [
        "\"Invalid startup ID\""
      ],
      "stack_out": [
        "\"Invalid startup ID\""
      ]
    },
    "2117": {
      "retsub": true,
      "op": "retsub"
    },
    "2118": {
      "block": "investInStartup_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2119": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "2121": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2122": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2123": {
      "op": "bnz investInStartup_after_if_else@8",
      "stack_out": []
    },
    "2126": {
      "op": "bytec 11 // \"Platform is currently inactive\"",
      "defined_out": [
        "\"Platform is currently inactive\""
      ],
      "stack_out": [
        "\"Platform is currently inactive\""
      ]
    },
    "2128": {
      "retsub": true,
      "op": "retsub"
    },
    "2129": {
      "block": "investInStartup_after_if_else@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2130": {
      "op": "bytec 10 // \"totalInvestments\"",
      "defined_out": [
        "\"totalInvestments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestments\""
      ]
    },
    "2132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2134": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2135": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2136": {
      "op": "bytec 10 // \"totalInvestments\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalInvestments\""
      ]
    },
    "2138": {
      "op": "swap",
      "stack_out": [
        "\"totalInvestments\"",
        "new_state_value%0#0"
      ]
    },
    "2139": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2140": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2141": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2142": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2143": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2144": {
      "op": "frame_dig -2",
      "defined_out": [
        "investmentAmount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "investmentAmount#0 (copy)"
      ]
    },
    "2146": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2147": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalFundsInvested\""
      ]
    },
    "2148": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%1#0"
      ]
    },
    "2149": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2151": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "2152": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2153": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2154": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%3#0",
        "investmentAmount#0 (copy)"
      ]
    },
    "2156": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "investmentAmount#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "investmentAmount#0 (copy)",
        "50"
      ]
    },
    "2157": {
      "op": "/",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ]
    },
    "2158": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "2159": {
      "op": "bytec_3 // \"platformFees\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"platformFees\""
      ]
    },
    "2160": {
      "op": "swap",
      "stack_out": [
        "\"platformFees\"",
        "new_state_value%2#0"
      ]
    },
    "2161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2162": {
      "op": "pushbytes \"Investment successful in startup\"",
      "defined_out": [
        "\"Investment successful in startup\""
      ],
      "stack_out": [
        "\"Investment successful in startup\""
      ]
    },
    "2196": {
      "retsub": true,
      "op": "retsub"
    },
    "2197": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realDeposit",
      "params": {},
      "block": "realDeposit",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2198": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2200": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2201": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1000000"
      ]
    },
    "2202": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2203": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsDeposited\""
      ]
    },
    "2204": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsDeposited\"",
        "new_state_value%0#0"
      ]
    },
    "2205": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2206": {
      "op": "pushbytes \"Real deposit processed: 1 ALGO\"",
      "defined_out": [
        "\"Real deposit processed: 1 ALGO\""
      ],
      "stack_out": [
        "\"Real deposit processed: 1 ALGO\""
      ]
    },
    "2238": {
      "retsub": true,
      "op": "retsub"
    },
    "2239": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateDeposit",
      "params": {
        "amount#0": "uint64"
      },
      "block": "simulateDeposit",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2242": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2244": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2245": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2246": {
      "op": "bz simulateDeposit_after_if_else@2",
      "stack_out": []
    },
    "2249": {
      "op": "pushbytes \"Amount must be greater than 0\"",
      "defined_out": [
        "\"Amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Amount must be greater than 0\""
      ]
    },
    "2280": {
      "retsub": true,
      "op": "retsub"
    },
    "2281": {
      "block": "simulateDeposit_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2283": {
      "op": "intc 5 // 100000",
      "defined_out": [
        "100000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "100000"
      ]
    },
    "2285": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2286": {
      "op": "bz simulateDeposit_after_if_else@4",
      "stack_out": []
    },
    "2289": {
      "op": "pushbytes \"Minimum deposit is 0.1 ALGO\"",
      "defined_out": [
        "\"Minimum deposit is 0.1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum deposit is 0.1 ALGO\""
      ]
    },
    "2318": {
      "retsub": true,
      "op": "retsub"
    },
    "2319": {
      "block": "simulateDeposit_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2320": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2322": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2323": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "2325": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2326": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsDeposited\""
      ]
    },
    "2327": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsDeposited\"",
        "new_state_value%0#0"
      ]
    },
    "2328": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2329": {
      "op": "pushbytes \"Deposit simulated successfully\"",
      "defined_out": [
        "\"Deposit simulated successfully\""
      ],
      "stack_out": [
        "\"Deposit simulated successfully\""
      ]
    },
    "2361": {
      "retsub": true,
      "op": "retsub"
    },
    "2362": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realWithdraw",
      "params": {
        "amount#0": "uint64"
      },
      "block": "realWithdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2365": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2368": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2369": {
      "op": "bz realWithdraw_after_if_else@2",
      "stack_out": []
    },
    "2372": {
      "op": "pushbytes \"Withdrawal amount must be greater than 0\"",
      "defined_out": [
        "\"Withdrawal amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Withdrawal amount must be greater than 0\""
      ]
    },
    "2414": {
      "retsub": true,
      "op": "retsub"
    },
    "2415": {
      "block": "realWithdraw_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2416": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2417": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2418": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2419": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2420": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2421": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2422": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2423": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2424": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "2426": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2427": {
      "op": "bz realWithdraw_after_if_else@4",
      "stack_out": []
    },
    "2430": {
      "op": "pushbytes \"Insufficient contract funds for withdrawal\"",
      "defined_out": [
        "\"Insufficient contract funds for withdrawal\""
      ],
      "stack_out": [
        "\"Insufficient contract funds for withdrawal\""
      ]
    },
    "2474": {
      "retsub": true,
      "op": "retsub"
    },
    "2475": {
      "block": "realWithdraw_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2477": {
      "op": "intc 5 // 100000",
      "defined_out": [
        "100000",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "100000"
      ]
    },
    "2479": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2480": {
      "op": "bz realWithdraw_after_if_else@6",
      "stack_out": []
    },
    "2483": {
      "op": "pushbytes \"Minimum withdrawal is 0.1 ALGO\"",
      "defined_out": [
        "\"Minimum withdrawal is 0.1 ALGO\""
      ],
      "stack_out": [
        "\"Minimum withdrawal is 0.1 ALGO\""
      ]
    },
    "2515": {
      "retsub": true,
      "op": "retsub"
    },
    "2516": {
      "block": "realWithdraw_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2517": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2518": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2519": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2520": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2522": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2523": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsDeposited\""
      ]
    },
    "2524": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsDeposited\"",
        "new_state_value%0#0"
      ]
    },
    "2525": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2526": {
      "op": "pushbytes \"Real withdrawal processed successfully\"",
      "defined_out": [
        "\"Real withdrawal processed successfully\""
      ],
      "stack_out": [
        "\"Real withdrawal processed successfully\""
      ]
    },
    "2566": {
      "retsub": true,
      "op": "retsub"
    },
    "2567": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateInvestment",
      "params": {
        "amount#0": "uint64"
      },
      "block": "simulateInvestment",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2570": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2572": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2573": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2574": {
      "op": "bz simulateInvestment_after_if_else@2",
      "stack_out": []
    },
    "2577": {
      "op": "bytec 12 // \"Investment amount must be greater than 0\"",
      "defined_out": [
        "\"Investment amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Investment amount must be greater than 0\""
      ]
    },
    "2579": {
      "retsub": true,
      "op": "retsub"
    },
    "2580": {
      "block": "simulateInvestment_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2581": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2583": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2585": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2586": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2587": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2588": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2589": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "2591": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2592": {
      "op": "bz simulateInvestment_after_if_else@4",
      "stack_out": []
    },
    "2595": {
      "op": "pushbytes \"Insufficient available funds for investment\"",
      "defined_out": [
        "\"Insufficient available funds for investment\""
      ],
      "stack_out": [
        "\"Insufficient available funds for investment\""
      ]
    },
    "2640": {
      "retsub": true,
      "op": "retsub"
    },
    "2641": {
      "block": "simulateInvestment_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2642": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2643": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2644": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2645": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2647": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2648": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsInvested\""
      ]
    },
    "2649": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%0#0"
      ]
    },
    "2650": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2651": {
      "op": "pushbytes \"Investment allocated successfully\"",
      "defined_out": [
        "\"Investment allocated successfully\""
      ],
      "stack_out": [
        "\"Investment allocated successfully\""
      ]
    },
    "2686": {
      "retsub": true,
      "op": "retsub"
    },
    "2687": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getAvailableFunds",
      "params": {},
      "block": "getAvailableFunds",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2688": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2689": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2690": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2691": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2692": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2693": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2694": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2695": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2696": {
      "retsub": true,
      "op": "retsub"
    },
    "2697": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalDeposited",
      "params": {},
      "block": "getTotalDeposited",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2698": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2700": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2701": {
      "retsub": true,
      "op": "retsub"
    },
    "2702": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getTotalInvested",
      "params": {},
      "block": "getTotalInvested",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2703": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2704": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2705": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2706": {
      "retsub": true,
      "op": "retsub"
    },
    "2707": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFees",
      "params": {},
      "block": "getPlatformFees",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2708": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "2709": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2710": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2711": {
      "retsub": true,
      "op": "retsub"
    },
    "2712": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformStats",
      "params": {},
      "block": "getPlatformStats",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2715": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2716": {
      "op": "bytec 6 // \"totalInvestors\"",
      "defined_out": [
        "\"totalInvestors\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalInvestors\""
      ]
    },
    "2718": {
      "op": "app_global_get_ex",
      "defined_out": [
        "investors#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "investors#0",
        "maybe_exists%0#0"
      ]
    },
    "2719": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "investors#0"
      ]
    },
    "2720": {
      "op": "intc_0 // 0",
      "stack_out": [
        "investors#0",
        "0"
      ]
    },
    "2721": {
      "op": "bytec 7 // \"totalStartups\"",
      "defined_out": [
        "\"totalStartups\"",
        "0",
        "investors#0"
      ],
      "stack_out": [
        "investors#0",
        "0",
        "\"totalStartups\""
      ]
    },
    "2723": {
      "op": "app_global_get_ex",
      "defined_out": [
        "investors#0",
        "maybe_exists%1#0",
        "startups#0"
      ],
      "stack_out": [
        "investors#0",
        "startups#0",
        "maybe_exists%1#0"
      ]
    },
    "2724": {
      "op": "swap",
      "stack_out": [
        "investors#0",
        "maybe_exists%1#0",
        "startups#0"
      ]
    },
    "2725": {
      "op": "cover 2",
      "defined_out": [
        "investors#0",
        "maybe_exists%1#0",
        "startups#0"
      ],
      "stack_out": [
        "startups#0",
        "investors#0",
        "maybe_exists%1#0"
      ]
    },
    "2727": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "startups#0",
        "investors#0"
      ]
    },
    "2728": {
      "op": "bnz getPlatformStats_after_if_else@3",
      "stack_out": [
        "startups#0"
      ]
    },
    "2731": {
      "op": "frame_dig 0",
      "stack_out": [
        "startups#0",
        "startups#0"
      ]
    },
    "2733": {
      "op": "bnz getPlatformStats_after_if_else@3",
      "stack_out": [
        "startups#0"
      ]
    },
    "2736": {
      "op": "pushbytes \"AlgoCredit Platform: Ready for users\"",
      "defined_out": [
        "\"AlgoCredit Platform: Ready for users\"",
        "startups#0"
      ],
      "stack_out": [
        "startups#0",
        "\"AlgoCredit Platform: Ready for users\""
      ]
    },
    "2774": {
      "op": "swap"
    },
    "2775": {
      "retsub": true,
      "op": "retsub"
    },
    "2776": {
      "block": "getPlatformStats_after_if_else@3",
      "stack_in": [
        "startups#0"
      ],
      "op": "pushbytes \"AlgoCredit Platform: Active\"",
      "defined_out": [
        "\"AlgoCredit Platform: Active\""
      ],
      "stack_out": [
        "startups#0",
        "\"AlgoCredit Platform: Active\""
      ]
    },
    "2805": {
      "op": "swap"
    },
    "2806": {
      "retsub": true,
      "op": "retsub"
    },
    "2807": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.realLoanFunding",
      "params": {
        "loanId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "realLoanFunding",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2810": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2812": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2813": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2814": {
      "op": "bz realLoanFunding_after_if_else@2",
      "stack_out": []
    },
    "2817": {
      "op": "bytec 13 // \"Funding amount must be greater than 0\"",
      "defined_out": [
        "\"Funding amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Funding amount must be greater than 0\""
      ]
    },
    "2819": {
      "retsub": true,
      "op": "retsub"
    },
    "2820": {
      "block": "realLoanFunding_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "2822": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)",
        "0"
      ]
    },
    "2823": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2824": {
      "op": "bz realLoanFunding_after_if_else@4",
      "stack_out": []
    },
    "2827": {
      "op": "bytec 14 // \"Invalid loan ID\"",
      "defined_out": [
        "\"Invalid loan ID\""
      ],
      "stack_out": [
        "\"Invalid loan ID\""
      ]
    },
    "2829": {
      "retsub": true,
      "op": "retsub"
    },
    "2830": {
      "block": "realLoanFunding_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2831": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2832": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2833": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2834": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2835": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2836": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2837": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2838": {
      "op": "-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2839": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2841": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2842": {
      "op": "bz realLoanFunding_after_if_else@6",
      "stack_out": []
    },
    "2845": {
      "op": "bytec 15 // \"Insufficient available funds\"",
      "defined_out": [
        "\"Insufficient available funds\""
      ],
      "stack_out": [
        "\"Insufficient available funds\""
      ]
    },
    "2847": {
      "retsub": true,
      "op": "retsub"
    },
    "2848": {
      "block": "realLoanFunding_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2849": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2850": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2851": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2852": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2854": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2855": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsInvested\""
      ]
    },
    "2856": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%0#0"
      ]
    },
    "2857": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2858": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2859": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "defined_out": [
        "\"totalActiveLoans\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalActiveLoans\""
      ]
    },
    "2861": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2862": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2863": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "2864": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2865": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalActiveLoans\""
      ]
    },
    "2867": {
      "op": "swap",
      "stack_out": [
        "\"totalActiveLoans\"",
        "new_state_value%1#0"
      ]
    },
    "2868": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2869": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2870": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "2871": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2872": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2873": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2875": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)",
        "50"
      ]
    },
    "2876": {
      "op": "/",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ]
    },
    "2877": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "2878": {
      "op": "bytec_3 // \"platformFees\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"platformFees\""
      ]
    },
    "2879": {
      "op": "swap",
      "stack_out": [
        "\"platformFees\"",
        "new_state_value%2#0"
      ]
    },
    "2880": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2881": {
      "op": "pushbytes \"Real loan funding processed successfully\"",
      "defined_out": [
        "\"Real loan funding processed successfully\""
      ],
      "stack_out": [
        "\"Real loan funding processed successfully\""
      ]
    },
    "2923": {
      "retsub": true,
      "op": "retsub"
    },
    "2924": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.simulateLoanFunding",
      "params": {
        "loanId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "simulateLoanFunding",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2927": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2929": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0"
      ]
    },
    "2930": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2931": {
      "op": "bz simulateLoanFunding_after_if_else@2",
      "stack_out": []
    },
    "2934": {
      "op": "bytec 13 // \"Funding amount must be greater than 0\"",
      "defined_out": [
        "\"Funding amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Funding amount must be greater than 0\""
      ]
    },
    "2936": {
      "retsub": true,
      "op": "retsub"
    },
    "2937": {
      "block": "simulateLoanFunding_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "2939": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)",
        "0"
      ]
    },
    "2940": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2941": {
      "op": "bz simulateLoanFunding_after_if_else@4",
      "stack_out": []
    },
    "2944": {
      "op": "bytec 14 // \"Invalid loan ID\"",
      "defined_out": [
        "\"Invalid loan ID\""
      ],
      "stack_out": [
        "\"Invalid loan ID\""
      ]
    },
    "2946": {
      "retsub": true,
      "op": "retsub"
    },
    "2947": {
      "block": "simulateLoanFunding_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2948": {
      "op": "bytec_2 // \"totalFundsDeposited\"",
      "defined_out": [
        "\"totalFundsDeposited\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsDeposited\""
      ]
    },
    "2949": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2950": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2951": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2952": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2953": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2954": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2955": {
      "op": "-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2956": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2958": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2959": {
      "op": "bz simulateLoanFunding_after_if_else@6",
      "stack_out": []
    },
    "2962": {
      "op": "bytec 15 // \"Insufficient available funds\"",
      "defined_out": [
        "\"Insufficient available funds\""
      ],
      "stack_out": [
        "\"Insufficient available funds\""
      ]
    },
    "2964": {
      "retsub": true,
      "op": "retsub"
    },
    "2965": {
      "block": "simulateLoanFunding_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2966": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "defined_out": [
        "\"totalFundsInvested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalFundsInvested\""
      ]
    },
    "2967": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2968": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2969": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2971": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2972": {
      "op": "bytec_1 // \"totalFundsInvested\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalFundsInvested\""
      ]
    },
    "2973": {
      "op": "swap",
      "stack_out": [
        "\"totalFundsInvested\"",
        "new_state_value%0#0"
      ]
    },
    "2974": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2975": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2976": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "defined_out": [
        "\"totalActiveLoans\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalActiveLoans\""
      ]
    },
    "2978": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2979": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2980": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "2981": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2982": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalActiveLoans\""
      ]
    },
    "2984": {
      "op": "swap",
      "stack_out": [
        "\"totalActiveLoans\"",
        "new_state_value%1#0"
      ]
    },
    "2985": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2987": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "2988": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2989": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2990": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2992": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)",
        "50"
      ]
    },
    "2993": {
      "op": "/",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%4#0"
      ]
    },
    "2994": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "2995": {
      "op": "bytec_3 // \"platformFees\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"platformFees\""
      ]
    },
    "2996": {
      "op": "swap",
      "stack_out": [
        "\"platformFees\"",
        "new_state_value%2#0"
      ]
    },
    "2997": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2998": {
      "op": "pushbytes \"Loan funding simulated successfully\"",
      "defined_out": [
        "\"Loan funding simulated successfully\""
      ],
      "stack_out": [
        "\"Loan funding simulated successfully\""
      ]
    },
    "3035": {
      "retsub": true,
      "op": "retsub"
    },
    "3036": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getActiveLoansCount",
      "params": {},
      "block": "getActiveLoansCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3037": {
      "op": "bytec 5 // \"totalActiveLoans\"",
      "defined_out": [
        "\"totalActiveLoans\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalActiveLoans\""
      ]
    },
    "3039": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3040": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3041": {
      "retsub": true,
      "op": "retsub"
    },
    "3042": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.togglePlatformStatus",
      "params": {},
      "block": "togglePlatformStatus",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3043": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "3045": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3046": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3047": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "3048": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3049": {
      "op": "bz togglePlatformStatus_else_body@2",
      "stack_out": []
    },
    "3052": {
      "op": "bytec 4 // \"contractActive\"",
      "stack_out": [
        "\"contractActive\""
      ]
    },
    "3054": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contractActive\"",
        "0"
      ]
    },
    "3055": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3056": {
      "op": "pushbytes \"Platform deactivated\"",
      "defined_out": [
        "\"Platform deactivated\""
      ],
      "stack_out": [
        "\"Platform deactivated\""
      ]
    },
    "3078": {
      "retsub": true,
      "op": "retsub"
    },
    "3079": {
      "block": "togglePlatformStatus_else_body@2",
      "stack_in": [],
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\""
      ],
      "stack_out": [
        "\"contractActive\""
      ]
    },
    "3081": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"contractActive\"",
        "1"
      ],
      "stack_out": [
        "\"contractActive\"",
        "1"
      ]
    },
    "3082": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3083": {
      "op": "pushbytes \"Platform activated\"",
      "defined_out": [
        "\"Platform activated\""
      ],
      "stack_out": [
        "\"Platform activated\""
      ]
    },
    "3103": {
      "retsub": true,
      "op": "retsub"
    },
    "3104": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.collectPlatformFees",
      "params": {},
      "block": "collectPlatformFees",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3105": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "3106": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fees#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "fees#0",
        "maybe_exists%0#0"
      ]
    },
    "3107": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fees#0"
      ]
    },
    "3108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fees#0",
        "0"
      ]
    },
    "3109": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3110": {
      "op": "bz collectPlatformFees_after_if_else@2",
      "stack_out": []
    },
    "3113": {
      "op": "pushbytes \"No fees available for collection\"",
      "defined_out": [
        "\"No fees available for collection\""
      ],
      "stack_out": [
        "\"No fees available for collection\""
      ]
    },
    "3147": {
      "retsub": true,
      "op": "retsub"
    },
    "3148": {
      "block": "collectPlatformFees_after_if_else@2",
      "stack_in": [],
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\""
      ],
      "stack_out": [
        "\"platformFees\""
      ]
    },
    "3149": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "\"platformFees\"",
        "0"
      ]
    },
    "3150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3151": {
      "op": "pushbytes \"Platform fees collected successfully\"",
      "defined_out": [
        "\"Platform fees collected successfully\""
      ],
      "stack_out": [
        "\"Platform fees collected successfully\""
      ]
    },
    "3189": {
      "retsub": true,
      "op": "retsub"
    },
    "3190": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.getPlatformFeesAmount",
      "params": {},
      "block": "getPlatformFeesAmount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3191": {
      "op": "bytec_3 // \"platformFees\"",
      "defined_out": [
        "\"platformFees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"platformFees\""
      ]
    },
    "3192": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3193": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3194": {
      "retsub": true,
      "op": "retsub"
    },
    "3195": {
      "subroutine": "smart_contracts/algo_smartcontract/contract.algo.ts::AlgoCreditPlatformTestNet.testPlatform",
      "params": {},
      "block": "testPlatform",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3196": {
      "op": "bytec 4 // \"contractActive\"",
      "defined_out": [
        "\"contractActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contractActive\""
      ]
    },
    "3198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "active#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "active#0",
        "maybe_exists%0#0"
      ]
    },
    "3199": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "active#0"
      ]
    },
    "3200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "active#0"
      ],
      "stack_out": [
        "active#0",
        "1"
      ]
    },
    "3201": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3202": {
      "op": "bz testPlatform_else_body@2",
      "stack_out": []
    },
    "3205": {
      "op": "pushbytes \"AlgoCredit Platform test successful - ACTIVE\"",
      "defined_out": [
        "\"AlgoCredit Platform test successful - ACTIVE\""
      ],
      "stack_out": [
        "\"AlgoCredit Platform test successful - ACTIVE\""
      ]
    },
    "3251": {
      "retsub": true,
      "op": "retsub"
    },
    "3252": {
      "block": "testPlatform_else_body@2",
      "stack_in": [],
      "op": "pushbytes \"AlgoCredit Platform test successful - INACTIVE\"",
      "defined_out": [
        "\"AlgoCredit Platform test successful - INACTIVE\""
      ],
      "stack_out": [
        "\"AlgoCredit Platform test successful - INACTIVE\""
      ]
    },
    "3300": {
      "retsub": true,
      "op": "retsub"
    }
  }
}